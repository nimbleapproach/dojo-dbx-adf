# Databricks notebook source
# Importing Libraries
import os

# COMMAND ----------

ENVIRONMENT = os.environ["__ENVIRONMENT__"]
ENVIRONMENT

# COMMAND ----------


spark.catalog.setCurrentCatalog(f"gold_{ENVIRONMENT}")


# COMMAND ----------

catalog = spark.catalog.currentCatalog()
schema = 'orion'

# COMMAND ----------

# REMOVE ONCE SOLUTION IS LIVE
if ENVIRONMENT == 'dev':
    spark.sql(f"""
              DROP TABLE IF EXISTS {catalog}.{schema}.dim_product_vendor_arr
              """)

# COMMAND ----------

spark.sql(f"""
CREATE TABLE IF NOT EXISTS {catalog}.{schema}.dim_product_vendor_arr (
  product_vendor_arr_pk BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  product_vendor_code STRING NOT NULL COMMENT 'Product Vendor Concatented Code',
  product_description STRING COMMENT 'The description of the Product',
  product_code STRING COMMENT 'The local ID from the Product if exists',
  vendor_code STRING COMMENT 'The Local ID from the Vednor table',
  product_type STRING COMMENT 'Classification of the Product Code',
  Commitment_Duration_in_months STRING COMMENT '',
  Commitment_Duration2 STRING COMMENT '',
  Billing_Frequency STRING COMMENT '',
  Billing_Frequency2 STRING COMMENT '',
  Consumption_Model STRING COMMENT '',
  source_system_fk BIGINT COMMENT 'The ID from the Source System Dimension',
  start_datetime TIMESTAMP NOT NULL COMMENT 'The dimensional start date of the record',
  end_datetime TIMESTAMP COMMENT 'The dimensional end date of the record, those records with a NULL value are current',
  is_current INT COMMENT 'Flag to indicate if this is the active dimension record per code',
  Sys_Gold_InsertedDateTime_UTC TIMESTAMP COMMENT 'The timestamp when this record was inserted into gold',
  Sys_Gold_ModifiedDateTime_UTC TIMESTAMP COMMENT 'The timestamp when this record was last updated in gold',
  CONSTRAINT `product_vendor_arr_primary_key` PRIMARY KEY (`product_vendor_arr_pk`)
)
USING delta
CLUSTER BY (source_system_fk,product_vendor_code)
TBLPROPERTIES (
  'delta.checkpointPolicy' = 'v2',
  'delta.constraints.datewithinrange_start_datetime' = 'start_datetime >= "1900-01-01"',
  'delta.constraints.valid_is_current_value' = 'is_current IN ( 1 , 0 )',
  'delta.enableDeletionVectors' = 'true',
  'delta.enableRowTracking' = 'true',
  'delta.feature.allowColumnDefaults' = 'supported',
  'delta.feature.checkConstraints' = 'supported',
  'delta.feature.columnMapping' = 'supported',
  'delta.feature.deletionVectors' = 'supported',
  'delta.feature.identityColumns' = 'supported',
  'delta.feature.invariants' = 'supported',
  'delta.feature.rowTracking' = 'supported',
  'delta.feature.v2Checkpoint' = 'supported')
""")

# COMMAND ----------

# now add in the default member
sqldf= spark.sql("""
SELECT CAST(-1 AS BIGINT) AS product_vendor_arr_pk,
       CAST('N/A' AS STRING) AS product_vendor_code,
       CAST(NULL AS STRING) AS product_description,
       CAST(NULL AS STRING) AS local_product_id,
       CAST(NULL AS STRING) AS product_type,
       CAST('N/A' AS STRING) AS line_item_type,
       CAST('N/A' AS STRING) AS manufacturer_item_number,
       CAST(-1 AS BIGINT) AS source_system_fk,
       CAST('1900-01-01' AS TIMESTAMP) AS start_datetime,
       CAST(NULL AS TIMESTAMP) AS end_datetime,
       CAST(1 AS INTEGER) AS is_current,
       CAST(NULL AS TIMESTAMP) AS Sys_Gold_InsertedDateTime_UTC,
       CAST(NULL AS TIMESTAMP) AS Sys_Gold_ModifiedDateTime_UTC
""").write.mode("append").option("mergeSchema", "true").saveAsTable(f"{catalog}.{schema}.dim_product_vendor_arr")
