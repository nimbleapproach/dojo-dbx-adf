# Databricks notebook source
# Importing Libraries
import os
spark = spark  # noqa

# COMMAND ----------

ENVIRONMENT = os.environ["__ENVIRONMENT__"]
ENVIRONMENT

# COMMAND ----------


spark.catalog.setCurrentCatalog(f"gold_{ENVIRONMENT}")


# COMMAND ----------

catalog = spark.catalog.currentCatalog()
schema = 'orion'

# COMMAND ----------

# REMOVE ONCE SOLUTION IS LIVE
if ENVIRONMENT == 'dev':
    spark.sql(f"""
              DROP TABLE IF EXISTS {catalog}.{schema}.dim_reseller
              """)

# COMMAND ----------

spark.sql(f"""
CREATE TABLE IF NOT EXISTS {catalog}.{schema}.dim_reseller (
  reseller_pk BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  reseller_code STRING NOT NULL COMMENT 'Reseller Code',
  reseller_name_internal STRING COMMENT 'The internal name of the reseller',
  country_code STRING COMMENT 'The country code to which the reseller relates',
  reseller_geography_internal STRING COMMENT 'The geographical country code to which the reseller relates',
  reseller_start_date TIMESTAMP COMMENT 'The start date of the reseller',
  source_system_fk BIGINT COMMENT 'The ID from the Source System Dimension',
  start_datetime TIMESTAMP NOT NULL COMMENT 'The dimensional start date of the record',
  end_datetime TIMESTAMP COMMENT 'The dimensional end date of the record, those with a NULL value is curent',
  is_current INT COMMENT 'Flag to indicate if this is the active dimension record per code',
  Sys_Gold_InsertedDateTime_UTC TIMESTAMP COMMENT 'The timestamp when this record was inserted into gold',
  Sys_Gold_ModifiedDateTime_UTC TIMESTAMP COMMENT 'The timestamp when this record was last updated in gold',
  CONSTRAINT `reseller_primary_key` PRIMARY KEY (`reseller_pk`))
USING delta
CLUSTER BY (source_system_fk, reseller_code)
TBLPROPERTIES (
  'delta.checkpointPolicy' = 'v2',
  'delta.constraints.datewithinrange_start_datetime' = 'start_datetime >= "1900-01-01"',
  'delta.constraints.valid_is_current_value' = 'is_current IN ( 1 , 0 )',
  'delta.enableDeletionVectors' = 'true',
  'delta.enableRowTracking' = 'true',
  'delta.feature.allowColumnDefaults' = 'supported',
  'delta.feature.checkConstraints' = 'supported',
  'delta.feature.columnMapping' = 'supported',
  'delta.feature.deletionVectors' = 'supported',
  'delta.feature.identityColumns' = 'supported',
  'delta.feature.invariants' = 'supported',
  'delta.feature.rowTracking' = 'supported',
  'delta.feature.v2Checkpoint' = 'supported')
""")


sqldf= spark.sql(f"""
SELECT CAST(-1 AS BIGINT) AS reseller_pk,
       CAST('N/A' AS STRING) AS reseller_code,
       CAST(NULL AS STRING) AS reseller_name_internal,
       CAST(NULL AS STRING) AS reseller_geography_internal,
       CAST('1900-01-01' AS TIMESTAMP) AS reseller_start_date,
       CAST(-1 AS BIGINT) AS source_system_fk,
       CAST('1900-01-01' AS TIMESTAMP) AS start_datetime,
       CAST('9999-12-31' AS TIMESTAMP) AS end_datetime,
       CAST(1 AS INTEGER) AS is_current,
       CAST(NULL AS TIMESTAMP) AS Sys_Gold_InsertedDateTime_UTC,
       CAST(NULL AS TIMESTAMP) AS Sys_Gold_ModifiedDateTime_UTC
--FROM {catalog}.{schema}.dim_reseller p
WHERE NOT EXISTS ( SELECT 1 FROM {catalog}.{schema}.dim_reseller WHERE reseller_pk = -1)
""").write.mode("append").option("mergeSchema", "true").saveAsTable(f"{catalog}.{schema}.dim_reseller")

