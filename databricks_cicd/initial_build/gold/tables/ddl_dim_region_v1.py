# Databricks notebook source
# Importing Libraries
import os

# COMMAND ----------

ENVIRONMENT = os.environ["__ENVIRONMENT__"]
ENVIRONMENT

# COMMAND ----------


spark.catalog.setCurrentCatalog(f"gold_{ENVIRONMENT}")


# COMMAND ----------

catalog = spark.catalog.currentCatalog()
schema = 'orion'

# COMMAND ----------

# REMOVE ONCE SOLUTION IS LIVE
if ENVIRONMENT == 'dev':
    spark.sql(f"""
              DROP TABLE IF EXISTS {catalog}.{schema}.dim_region
              """)

# COMMAND ----------

spark.sql(f"""
CREATE TABLE IF NOT EXISTS {catalog}.{schema}.dim_region (
  region_pk BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  region_code STRING NOT NULL COMMENT 'Region Code',
  region_name STRING COMMENT 'The description name of the region',
  country_code STRING COMMENT 'The country code to which the region relates',
  country STRING COMMENT 'The name of the country',
  country_detail STRING COMMENT 'Context of the country potentially including the reference to entity',
  country_visuals STRING COMMENT 'Country name to be used in Power BI visualisations',
  region_group STRING COMMENT 'The high level segion grouping',
  start_datetime TIMESTAMP NOT NULL COMMENT 'The dimensional start date of the record',
  end_datetime TIMESTAMP COMMENT 'The dimensional end date of the record, those with a NULL value is curent',
  is_current INT COMMENT 'Flag to indicate if this is the active dimension record per code',
  Sys_Gold_InsertedDateTime_UTC TIMESTAMP COMMENT 'The timestamp when this record was inserted into gold',
  Sys_Gold_ModifiedDateTime_UTC TIMESTAMP COMMENT 'The timestamp when this record was last updated in gold',
  CONSTRAINT `region_primary_key` PRIMARY KEY (`region_pk`))
USING delta
CLUSTER BY (region_code)
TBLPROPERTIES (
  'delta.checkpointPolicy' = 'v2',
  'delta.constraints.datewithinrange_start_datetime' = 'start_datetime >= "1900-01-01"',
  'delta.constraints.valid_is_current_value' = 'is_current IN ( 1 , 0 )',
  'delta.enableDeletionVectors' = 'true',
  'delta.enableRowTracking' = 'true',
  'delta.feature.allowColumnDefaults' = 'supported',
  'delta.feature.checkConstraints' = 'supported',
  'delta.feature.columnMapping' = 'supported',
  'delta.feature.deletionVectors' = 'supported',
  'delta.feature.identityColumns' = 'supported',
  'delta.feature.invariants' = 'supported',
  'delta.feature.rowTracking' = 'supported',
  'delta.feature.v2Checkpoint' = 'supported')
""")
