# Databricks notebook source
# Importing Libraries
import os
spark = spark  # noqa

# COMMAND ----------

ENVIRONMENT = os.environ["__ENVIRONMENT__"]
ENVIRONMENT

# COMMAND ----------


spark.catalog.setCurrentCatalog(f"gold_{ENVIRONMENT}")


# COMMAND ----------

catalog = spark.catalog.currentCatalog()
schema = 'orion'

# COMMAND ----------

# REMOVE ONCE SOLUTION IS LIVE
if ENVIRONMENT == 'dev':
    spark.sql(f"""
              DROP TABLE IF EXISTS {catalog}.{schema}.link_reseller_to_reseller_group
              """)

# COMMAND ----------

spark.sql(f"""
CREATE TABLE IF NOT EXISTS {catalog}.{schema}.link_reseller_to_reseller_group (
  reseller_to_reseller_group_pk BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
  reseller_group_fk BIGINT NOT NULL COMMENT 'Entity Group PK from the Dimension table',
  reseller_fk BIGINT NOT NULL COMMENT 'Entity PK from the Dimension table',
  start_datetime TIMESTAMP NOT NULL COMMENT 'The dimensional start date of the record',
  end_datetime TIMESTAMP COMMENT 'The dimensional end date of the record, those records with a NULL value are current',
  is_current INT COMMENT 'Flag to indicate if this is the active dimension record per code',
  Sys_Gold_InsertedDateTime_UTC TIMESTAMP COMMENT 'The timestamp when this record was inserted into gold',
  Sys_Gold_ModifiedDateTime_UTC TIMESTAMP COMMENT 'The timestamp when this record was last updated in gold',
  CONSTRAINT `reseller_to_reseller_group_primary_key` PRIMARY KEY (`reseller_to_reseller_group_pk`))
USING delta
CLUSTER BY (reseller_group_fk, reseller_fk)
TBLPROPERTIES (
  'delta.checkpointPolicy' = 'v2',
  'delta.constraints.datewithinrange_start_datetime' = 'start_datetime >= "1900-01-01"',
  'delta.constraints.valid_is_current_value' = 'is_current IN ( 1 , 0 )',
  'delta.enableDeletionVectors' = 'true',
  'delta.enableRowTracking' = 'true',
  'delta.feature.allowColumnDefaults' = 'supported',
  'delta.feature.checkConstraints' = 'supported',
  'delta.feature.columnMapping' = 'supported',
  'delta.feature.deletionVectors' = 'supported',
  'delta.feature.identityColumns' = 'supported',
  'delta.feature.invariants' = 'supported',
  'delta.feature.rowTracking' = 'supported',
  'delta.feature.v2Checkpoint' = 'supported')
""")

# COMMAND ----------

# now add in the default member
sqldf= spark.sql("""
SELECT CAST(-1 AS BIGINT) AS reseller_to_reseller_group_pk,
       CAST(-1 AS BIGINT) AS reseller_group_fk,
       CAST(-1 AS BIGINT) AS reseller_fk,
       CAST('1900-01-01' AS TIMESTAMP) AS start_datetime,
       CAST(NULL AS TIMESTAMP) AS end_datetime,
       CAST(1 AS INTEGER) AS is_current,
       CAST(NULL AS TIMESTAMP) AS Sys_Gold_InsertedDateTime_UTC,
       CAST(NULL AS TIMESTAMP) AS Sys_Gold_ModifiedDateTime_UTC
""").write.mode("overwrite").option("mergeSchema", "true").saveAsTable(f"{catalog}.{schema}.link_reseller_to_reseller_group")
