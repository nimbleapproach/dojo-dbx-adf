{
	"name": "DF_NETSUITE_CDM_TO_BRONZE_DELTALOAD",
	"properties": {
		"folder": {
			"name": "Starlink/NETSUITE"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CSV_NETSUITE_DYNAMIC",
						"type": "DatasetReference"
					},
					"name": "GetFile"
				},
				{
					"linkedService": {
						"referenceName": "LS_ADLS",
						"type": "LinkedServiceReference"
					},
					"name": "GetBronzeData"
				},
				{
					"linkedService": {
						"referenceName": "LS_SQLDB_METADATA",
						"type": "LinkedServiceReference"
					},
					"name": "GetKeysControlTable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_ADLS",
						"type": "LinkedServiceReference"
					},
					"name": "WriteDeltaTable"
				},
				{
					"name": "Cache"
				},
				{
					"linkedService": {
						"referenceName": "LS_ADLS",
						"type": "LinkedServiceReference"
					},
					"name": "WriteKeys"
				}
			],
			"transformations": [
				{
					"name": "AddBronzeLoadDate"
				},
				{
					"name": "GetMaxWatermark"
				},
				{
					"name": "Increment"
				},
				{
					"name": "AddCurrentWatermark"
				},
				{
					"name": "DropCurrentWatermark"
				},
				{
					"name": "CastTimestamps"
				},
				{
					"name": "SelectKeys"
				},
				{
					"name": "Deduplicate"
				},
				{
					"name": "AddHashKey"
				},
				{
					"name": "DropSysHashKey"
				},
				{
					"name": "AddLoadTime"
				}
			],
			"scriptLines": [
				"parameters{",
				"     pm_FileName as string",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: true,",
				"     multiLineRow: true,",
				"     dateFormats: ['dd/MM/yyyy'],",
				"     timestampFormats: ['dd/MM/yyyy h:mm a'],",
				"     manifestType: 'manifest',",
				"     mode: 'read') ~> GetFile",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'bronze',",
				"     folderPath: ('netsuite/'+ $pm_FileName)) ~> GetBronzeData",
				"source(output(",
				"          Business_Keys as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: (\"Select Business_Keys from [adf].[CT_NETSUITE_KEYS] where TABLE_NAME = '\" +$pm_FileName + \"'\"),",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> GetKeysControlTable",
				"DropCurrentWatermark derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
				"GetBronzeData aggregate(CurrentWatermark = max(toTimestamp(byName('Last_Modified')))) ~> GetMaxWatermark",
				"AddCurrentWatermark filter(iif(isNull(CurrentWatermark),true(),toTimestamp(byName('Last_Modified')) > CurrentWatermark)) ~> Increment",
				"CastTimestamps, GetMaxWatermark join(true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> AddCurrentWatermark",
				"Increment select(mapColumn(",
				"          each(match(name!='CurrentWatermark'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropCurrentWatermark",
				"GetFile derive(Last_Modified = toTimestamp(byName('Last_Modified'),'dd/MM/yyyy h:mm a'),",
				"          Date_Created = toTimestamp(byName('Date_Created'),'dd/MM/yyyy h:mm a')) ~> CastTimestamps",
				"GetFile select(mapColumn(",
				"          each(match(contains(split(Cache#output().Business_Keys,','),#item==name)))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectKeys",
				"AddHashKey aggregate(groupBy(Sys_HashKey),",
				"     each(match(name!='Sys_HashKey'), $$ = first($$))) ~> Deduplicate",
				"SelectKeys derive(Sys_HashKey = sha2(256, concatWS('~',toString(columns())))) ~> AddHashKey",
				"Deduplicate select(mapColumn(",
				"          each(match(name!='Sys_HashKey'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DropSysHashKey",
				"DropSysHashKey derive(Sys_DataFactory_LoadDateTime_UTC = currentUTC()) ~> AddLoadTime",
				"AddBronzeLoadDate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'bronze',",
				"     folderPath: ('netsuite/'+ $pm_FileName),",
				"     mergeSchema: true,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable",
				"GetKeysControlTable sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> Cache",
				"AddLoadTime sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     compressionType: 'snappy',",
				"     compressionLevel: 'Fastest',",
				"     fileSystem: 'keys',",
				"     folderPath: ('netsuite/'+ $pm_FileName),",
				"     overwrite: true,",
				"     mergeSchema: true,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> WriteKeys"
			]
		}
	}
}