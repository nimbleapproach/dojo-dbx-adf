{
	"name": "PL_30_IGSQL01_Load_View_ByVersionNumber",
	"properties": {
		"activities": [
			{
				"name": "IfFullLoad",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set COLUMNNAME string",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@pipeline().parameters.pm_FullLoad",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Delta Load CRM IG",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Watermarkvalue_Delta",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "WatermarkMaxValue",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"additionalColumns": [
										{
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"value": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										},
										{
											"name": "Sys_DatabaseName",
											"value": {
												"value": "@pipeline().parameters.pm_DatabaseName",
												"type": "Expression"
											}
										}
									],
									"sqlReaderQuery": {
										"value": "SELECT \nconvert(bigint, @{activity('Get Watermark Column_Delta').output.firstRow.COLUMN_NAME} ) as VersionNumber,\n@{variables('ColumnString')} FROM \ndbo.[@{pipeline().parameters.pm_TableName}]\nWHERE \nconvert(bigint,\"@{activity('Get Watermark Column_Delta').output.firstRow.COLUMN_NAME}\")> @{variables('Watermark_Value_Delta')}\nAND \nconvert(bigint,\"@{activity('Get Watermark Column_Delta').output.firstRow.COLUMN_NAME}\")<= @{variables('Max_Watermark')}\n\n\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings",
										"maxRowsPerFile": 1000000,
										"fileNamePrefix": {
											"value": "bronze-igsql01-@{pipeline().parameters.pm_TableName}-@{pipeline().parameters.pm_DatabaseName}-@{utcNow()}",
											"type": "Expression"
										}
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DS_SQLDB_CRM_DYNAMIC",
									"type": "DatasetReference",
									"parameters": {
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										},
										"pm_TableName": {
											"value": "@pipeline().parameters.pm_TableName",
											"type": "Expression"
										},
										"pm_DatabaseName": {
											"value": "@pipeline().parameters.pm_DatabaseName",
											"type": "Expression"
										},
										"pm_SchemaName": {
											"value": "@pipeline().parameters.pm_SchemaName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLS_PARQUET",
									"type": "DatasetReference",
									"parameters": {
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										},
										"pm_FileSystem": {
											"value": "bronze",
											"type": "Expression"
										},
										"pm_Directory": {
											"value": "igsql01/@{pipeline().parameters.pm_TableName}/pm_DatabaseName=@{pipeline().parameters.pm_DatabaseName}/",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "UpdateWatermark_Delta_Load",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Delta Load CRM IG",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[adf].[sp_igsql01_crm_tables_watermark_upsert]",
								"storedProcedureParameters": {
									"table_name": {
										"value": {
											"value": "@pipeline().parameters.pm_TableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"watermark": {
										"value": {
											"value": "@variables('Max_Watermark')",
											"type": "Expression"
										},
										"type": "String"
									},
									"database_name": {
										"value": {
											"value": "@pipeline().parameters.pm_DatabaseName",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SQLDB_METADATA",
								"type": "LinkedServiceReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Get Watermark data_Delta",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Get Watermark Column_Delta",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT COALESCE([WATERMARK],0) AS [WATERMARK_DELTA]\n  FROM [adf].[CT_IGSQL01_TABLES] where DATABASE_NAME='@{pipeline().parameters.pm_DatabaseName}' AND TABLE_NAME='@{pipeline().parameters.pm_TableName}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
									"type": "DatasetReference",
									"parameters": {
										"pm_SchemaName": "adf",
										"pm_TableName": "CT_IGSQL01_TABLES",
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Get Watermark Column_Delta",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT \nCOLUMN_NAME\n\n  FROM [adf].[CT_IGSQL01_COLUMNS] WHERE \n  TABLE_NAME='@{pipeline().parameters.pm_TableName}' AND WATERMARK_COLUMN=1",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
									"type": "DatasetReference",
									"parameters": {
										"pm_SchemaName": {
											"value": "adf",
											"type": "Expression"
										},
										"pm_TableName": "CT_IGSQL01_COLUMNS",
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Watermarkvalue_Delta",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Watermark data_Delta",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "Watermark_Value_Delta",
								"value": {
									"value": "@activity('Get Watermark data_Delta').output.firstRow.WATERMARK_DELTA",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Get Source Max Watermark Value",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Get Watermark Column_Delta",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "SELECT \nMAX(convert(bigint, @{activity('Get Watermark Column_Delta').output.firstRow.COLUMN_NAME})) as MAXWATERMARK FROM \n[@{pipeline().parameters.pm_SchemaName}].[@{pipeline().parameters.pm_TableName}] \n\n\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLDB_CRM_DYNAMIC",
									"type": "DatasetReference",
									"parameters": {
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										},
										"pm_TableName": {
											"value": "@pipeline().parameters.pm_TableName",
											"type": "Expression"
										},
										"pm_DatabaseName": {
											"value": "@pipeline().parameters.pm_DatabaseName",
											"type": "Expression"
										},
										"pm_SchemaName": {
											"value": "@pipeline().parameters.pm_SchemaName",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "WatermarkMaxValue",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Source Max Watermark Value",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "Max_Watermark",
								"value": {
									"value": "@activity('Get Source Max Watermark Value').output.firstRow.MAXWATERMARK",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Full Load CRM IG",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Set Source SQLString",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"additionalColumns": [
										{
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"value": {
												"value": "@utcNow()",
												"type": "Expression"
											}
										},
										{
											"name": "Sys_DatabaseName",
											"value": {
												"value": "@pipeline().parameters.pm_DatabaseName",
												"type": "Expression"
											}
										}
									],
									"sqlReaderQuery": {
										"value": "@variables('ColumnString')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings",
										"maxRowsPerFile": 1000000,
										"fileNamePrefix": {
											"value": "bronze-igsql01-@{pipeline().parameters.pm_TableName}-@{pipeline().parameters.pm_DatabaseName}-@{utcNow()}",
											"type": "Expression"
										}
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DS_SQLDB_CRM_DYNAMIC",
									"type": "DatasetReference",
									"parameters": {
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										},
										"pm_TableName": {
											"value": "@pipeline().parameters.pm_TableName",
											"type": "Expression"
										},
										"pm_DatabaseName": {
											"value": "@pipeline().parameters.pm_DatabaseName",
											"type": "Expression"
										},
										"pm_SchemaName": {
											"value": "@pipeline().parameters.pm_SchemaName",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_ADLS_PARQUET",
									"type": "DatasetReference",
									"parameters": {
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										},
										"pm_FileSystem": {
											"value": "bronze",
											"type": "Expression"
										},
										"pm_Directory": {
											"value": "igsql01/@{pipeline().parameters.pm_TableName}/pm_DatabaseName=@{pipeline().parameters.pm_DatabaseName}/",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "UpdateWatermark_FullLoad",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Full Load CRM IG",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[adf].[sp_igsql01_crm_tables_watermark_upsert]",
								"storedProcedureParameters": {
									"table_name": {
										"value": {
											"value": "@pipeline().parameters.pm_TableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"watermark": {
										"value": {
											"value": "@variables('Watermark_value')",
											"type": "Expression"
										},
										"type": "String"
									},
									"database_name": {
										"value": {
											"value": "@pipeline().parameters.pm_DatabaseName",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SQLDB_METADATA",
								"type": "LinkedServiceReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Get Watermark data",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Get Watermark Column",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": {
										"value": "@if(\n    equals(activity('Get Watermark Column').output.firstRow.COLUMN_NAME, ''),'SELECT 0 WATERMARK_NEW',\n    concat(\n        'SELECT MAX(\ncase when ', activity('Get Watermark Column').output.firstRow.COLUMN_NAME,' =  0 then 0\nelse ', activity('Get Watermark Column').output.firstRow.COLUMN_NAME, 'end) AS WATERMARK_NEW FROM dbo.[',\n        pipeline().parameters.pm_TableName,\n        ']'\n    )\n)",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLDB_CRM_DYNAMIC",
									"type": "DatasetReference",
									"parameters": {
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										},
										"pm_TableName": {
											"value": "@pipeline().parameters.pm_TableName",
											"type": "Expression"
										},
										"pm_SchemaName": {
											"value": "@pipeline().parameters.pm_SchemaName",
											"type": "Expression"
										},
										"pm_DatabaseName": {
											"value": "@pipeline().parameters.pm_DatabaseName",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Get Watermark Column",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT ISNULL(\n    (SELECT TOP 1 COLUMN_NAME \n    FROM [adf].[CT_IGSQL01_COLUMNS] \n    WHERE TABLE_NAME = '@{pipeline().parameters.pm_TableName}' \n    AND WATERMARK_COLUMN = 1), \n    '') AS COLUMN_NAME",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
									"type": "DatasetReference",
									"parameters": {
										"pm_SchemaName": {
											"value": "adf",
											"type": "Expression"
										},
										"pm_TableName": "CT_IGSQL01_COLUMNS",
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										}
									}
								},
								"firstRowOnly": true
							}
						},
						{
							"name": "Watermarkvalue",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Watermark data",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "Watermark_value",
								"value": {
									"value": "@activity('Get Watermark data').output.firstRow.WATERMARK_NEW",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set Source SQLString",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Watermarkvalue",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "SQLString",
								"value": {
									"value": "@if(\n    equals(activity('Get Watermark Column').output.firstRow.COLUMN_NAME, ''),\n    concat('SELECT ', variables('ColumnString'), ' FROM dbo.[', pipeline().parameters.pm_TableName, ']'),concat('SELECT convert(bigint, [' , activity('Get Watermark Column').output.firstRow.COLUMN_NAME ,']) as VersionNumber, ', variables('ColumnString') ,' FROM dbo.[', pipeline().parameters.pm_TableName,'] WHERE convert(bigint,[', activity('Get Watermark Column').output.firstRow.COLUMN_NAME ,'])<= ', variables('Watermark_value')))\n",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Get Column Names",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT STUFF(\n    (SELECT ', ' + [COLUMN_NAME]\n    FROM [adf].[CT_IGSQL01_COLUMNS]\n    WHERE [TABLE_NAME] = '@{pipeline().parameters.pm_TableName}' \n    AND [ACTIVE] = 1\n    AND [WATERMARK_COLUMN] <> 1\n    FOR XML PATH('')), 1, 2, '') AS COLUMN_NAMES\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
						"type": "DatasetReference",
						"parameters": {
							"pm_SchemaName": {
								"value": "@pipeline().parameters.pm_SchemaName",
								"type": "Expression"
							},
							"pm_TableName": {
								"value": "@pipeline().parameters.pm_TableName",
								"type": "Expression"
							},
							"pm_Environment": {
								"value": "@pipeline().globalParameters.gpm_Environment",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "Set COLUMNNAME string",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Column Names",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "ColumnString",
					"value": {
						"value": "@activity('Get Column Names').output.firstRow.COLUMN_NAMES",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"pm_DatabaseName": {
				"type": "string",
				"defaultValue": "infinigateDE"
			},
			"pm_FullLoad": {
				"type": "bool",
				"defaultValue": false
			},
			"pm_TableName": {
				"type": "string",
				"defaultValue": "AccountBase"
			},
			"pm_SchemaName": {
				"type": "string",
				"defaultValue": "dbo"
			},
			"pm_ColumnName": {
				"type": "string"
			}
		},
		"variables": {
			"Watermark": {
				"type": "String"
			},
			"ColumnString": {
				"type": "String"
			},
			"ColumnName": {
				"type": "String"
			},
			"OpenBracket": {
				"type": "String"
			},
			"ClosedBracket": {
				"type": "String"
			},
			"Watermark_value": {
				"type": "Integer"
			},
			"Watermark_Value_Delta": {
				"type": "Integer"
			},
			"Max_Watermark": {
				"type": "Integer"
			},
			"SQLString": {
				"type": "String"
			}
		},
		"folder": {
			"name": "10 Bronze/IGSQL01 [CRM]"
		},
		"annotations": [],
		"lastPublishTime": "2024-07-18T11:07:17Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}