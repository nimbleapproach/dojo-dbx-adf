{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ig-dev-westeurope"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DS_BINARY_DELTALINK_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_DV",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_FileName": {
						"type": "string"
					},
					"pm_FileExtension": {
						"type": "string"
					},
					"pm_FileLocation": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/DELTALINK"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{dataset().pm_FileName}.@{dataset().pm_FileExtension}",
							"type": "Expression"
						},
						"folderPath": {
							"value": "deltalink/@{dataset().pm_FileLocation}",
							"type": "Expression"
						},
						"fileSystem": "external"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BINARY_NETSAFE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_DV",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/NETSAFE"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "netsafe/pending",
						"fileSystem": "external"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_BINARY_NETSUITE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_DV",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_environment": {
							"value": "dev",
							"type": "Expression"
						}
					}
				},
				"folder": {
					"name": "Sources/STARLINK/NETSUITE"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "netsuite"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_NETSUITE_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_DV",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_environment": {
							"value": "dev",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/STARLINK/NETSUITE"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@{dataset().pm_FileName}.csv",
							"type": "Expression"
						},
						"fileSystem": "netsuite"
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_EXCEL_CLOUD_DISTRIBUTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_DV",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/CLOUD_DISTRIBUTION"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "cloud_distribution/pending",
						"fileSystem": "external"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_EXCEL_D2B_CUSTOMERS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_DV",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_environment": {
							"value": "@dataset().pm_environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/D2B"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "d2b/customers/pending",
							"type": "Expression"
						},
						"fileSystem": "external"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_EXCEL_D2B_SALES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_DV",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_environment": {
							"value": "@dataset().pm_environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/D2B"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "d2b/sales/pending",
							"type": "Expression"
						},
						"fileSystem": "external"
					},
					"sheetIndex": 0,
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_PSSQL_CLOUDBLUE_OSS_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_PGSQL_CLOUDBLUE_OSS",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					},
					"pm_TableSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/CLOUDBLUE/OSS"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_TableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_PSSQL_CLOUDBLUE_PBA_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_PGSQL_CLOUDBLUE_PBA",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					},
					"pm_TableSchema": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/CLOUDBLUE/PBA"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_TableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLDB_CRM_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLDB_CRM_DYNAMIC",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						},
						"pm_DatabaseName": {
							"value": "@dataset().pm_DatabaseName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					},
					"pm_DatabaseName": {
						"type": "string"
					},
					"pm_SchemaName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/IGSQL01 [CRM]"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLDB_NAV_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLDB_NAV_DYNAMIC",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_DatabaseName": {
							"value": "@dataset().pm_DatabaseName",
							"type": "Expression"
						},
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					},
					"pm_SchemaName": {
						"type": "string"
					},
					"pm_DatabaseName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/IGSQL03 [Navision]"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLDB_NUVIAS_FO_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLDB_NUVIAS_FO",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						},
						"pm_DatabaseType": {
							"value": "@dataset().pm_DatabaseType",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_DatabaseType": {
						"type": "string"
					},
					"pm_SchemaName": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/NUVIAS/FO"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLDB_TAGETIK_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLDB_TAGETIK",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_SchemaName": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					},
					"pm_Environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/TAG02 [Tagetik]"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_NUVIAS_FO_CDM_TO_BRONZE_DELTALOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NUVIAS/Dynamics"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_NUVIAS_DYNAMICS",
								"type": "LinkedServiceReference"
							},
							"name": "GetCDMEnity"
						},
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "GetBronzeData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						},
						{
							"name": "GetMaxWatermark"
						},
						{
							"name": "Increment"
						},
						{
							"name": "AddCurrentWatermark"
						},
						{
							"name": "DropCurrentWatermark"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_Entity as string,",
						"     pm_ManifestPath as string,",
						"     pm_ManifestFile as string,",
						"     pm_FullLoad as boolean (false())",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     entity: ($pm_Entity),",
						"     format: 'cdm',",
						"     manifestType: 'manifest',",
						"     manifestName: ($pm_ManifestFile),",
						"     entityPath: ($pm_ManifestPath),",
						"     local: true,",
						"     folderPath: 'nuvias.operations.dynamics.com',",
						"     fileSystem: 'dynamics365-financeandoperations',",
						"     timestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSSSSSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss','MM-dd-yyyy hh:mm:ss a','MM-dd-yyyy HH:mm:ss'],",
						"     mode: 'read') ~> GetCDMEnity",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('nuvias.operations.dynamics.com/'+ $pm_Entity)) ~> GetBronzeData",
						"DropCurrentWatermark derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"GetBronzeData aggregate(CurrentWatermark = max(toTimestamp(byName('DataLakeModified_DateTime')))) ~> GetMaxWatermark",
						"AddCurrentWatermark filter(iif(isNull(CurrentWatermark),true(),toTimestamp(byName('DataLakeModified_DateTime')) > CurrentWatermark)) ~> Increment",
						"GetCDMEnity, GetMaxWatermark join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> AddCurrentWatermark",
						"Increment select(mapColumn(",
						"          each(match(name!='CurrentWatermark'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropCurrentWatermark",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('nuvias.operations.dynamics.com/'+ $pm_Entity),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_NUVIAS_FO_CDM_TO_BRONZE_FULLLOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NUVIAS/Dynamics"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_NUVIAS_DYNAMICS",
								"type": "LinkedServiceReference"
							},
							"name": "GetCDMEnity"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_Entity as string,",
						"     pm_ManifestPath as string,",
						"     pm_ManifestFile as string,",
						"     pm_FullLoad as boolean (false())",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     entity: ($pm_Entity),",
						"     format: 'cdm',",
						"     manifestType: 'manifest',",
						"     manifestName: ($pm_ManifestFile),",
						"     entityPath: ($pm_ManifestPath),",
						"     local: true,",
						"     folderPath: 'nuvias.operations.dynamics.com',",
						"     fileSystem: 'dynamics365-financeandoperations',",
						"     timestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSSSSSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss','MM-dd-yyyy hh:mm:ss a','MM-dd-yyyy HH:mm:ss'],",
						"     mode: 'read') ~> GetCDMEnity",
						"GetCDMEnity derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('nuvias.operations.dynamics.com/'+ $pm_Entity),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_30_IGSQL03_Recreate_View')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Recreate View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Drop View If Exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQLDB_NAV_DYNAMIC",
							"type": "LinkedServiceReference",
							"parameters": {
								"pm_DatabaseName": {
									"value": "@pipeline().parameters.pm_DatabaseName",
									"type": "Expression"
								},
								"pm_Environment": {
									"value": "@pipeline().globalParameters.gpm_Environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "\ncreate view [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_TableName}]\nas\n\nSELECT \ncast([timestamp] as bigint)as [Sys_RowNumber],\n@{concat(join(variables('ColumnString'),',' ) )} FROM dbo.[@{pipeline().parameters.pm_TableName}]\n\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get Columns Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [adf].[CT_IGSQL03_COLUMNS]\nWHERE [TABLE_NAME] = '@{pipeline().parameters.pm_TableName}'\nAND [ACTIVE] =1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_IGSQL03_COLUMNS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Column",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Columns Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Columns Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append Variable",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ColumnString",
										"value": {
											"value": "[[@{item().COLUMN_NAME}] as [@{replace(replace(replace(replace(replace(replace(replace(item().COLUMN_NAME,' ',''),'(',''),')',''),',',''),';',''),'{',''),'}','')}]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Drop View If Exist",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "For Each Column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQLDB_NAV_DYNAMIC",
							"type": "LinkedServiceReference",
							"parameters": {
								"pm_DatabaseName": {
									"value": "@pipeline().parameters.pm_DatabaseName",
									"type": "Expression"
								},
								"pm_Environment": {
									"value": "@pipeline().globalParameters.gpm_Environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "if object_id('[edw_@{pipeline().globalParameters.gpm_Environment}].@{pipeline().parameters.pm_TableName}', 'V') \nis not null drop view [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_TableName}]\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_TableName": {
						"type": "string"
					},
					"pm_DatabaseName": {
						"type": "string"
					}
				},
				"variables": {
					"ColumnString": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "00 Setup/IGSQL03 [Navision]/Recreate View"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_30_TAG02_Recreate_View')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Recreate View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Drop View If Exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQLDB_TAGETIK",
							"type": "LinkedServiceReference",
							"parameters": {
								"pm_Environment": "@pipeline().globalParameters.gpm_Environment"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "create view [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_TableName}]\nas\n\nSELECT \n@{concat(join(variables('ColumnString'),',' ) )} \nFROM dbo.[@{pipeline().parameters.pm_TableName}]",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get Columns Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [adf].[CT_TAG02_COLUMNS]\nWHERE [TABLE_NAME] = '@{pipeline().parameters.pm_TableName}'\nAND [ACTIVE] =1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_TAG02_COLUMNS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Column",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Columns Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Columns Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append Variable",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ColumnString",
										"value": {
											"value": "[[@{item().COLUMN_NAME}] as [@{replace(replace(replace(replace(replace(replace(replace(item().COLUMN_NAME,' ',''),'(',''),')',''),',',''),';',''),'{',''),'}','')}]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Drop View If Exist",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "For Each Column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQLDB_TAGETIK",
							"type": "LinkedServiceReference",
							"parameters": {
								"pm_Environment": "@pipeline().globalParameters.gpm_Environment"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "if object_id('[edw_@{pipeline().globalParameters.gpm_Environment}].@{replace(replace(replace(replace(join(split(pipeline().parameters.pm_TableName,' '),''),'_',''),'-',''),'(',''),')','')}', 'V') \nis not null drop view [edw_@{pipeline().globalParameters.gpm_Environment}].[@{replace(replace(replace(replace(join(split(pipeline().parameters.pm_TableName,' '),''),'_',''),'-',''),'(',''),')','')}]\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_TableName": {
						"type": "string"
					}
				},
				"variables": {
					"ColumnString": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "00 Setup/TAG02 [TAGETIK]/Recreate View"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_VUZION_CRM_TO_BRONZE_DELTALOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VUZION"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_VUZION_CRM_DYNAMICS",
								"type": "DatasetReference"
							},
							"name": "GetEntity"
						},
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "GetBronzeData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						},
						{
							"name": "GetMaxWatermark"
						},
						{
							"name": "Increment"
						},
						{
							"name": "AddCurrentWatermark"
						},
						{
							"name": "DropCurrentWatermark"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_TableName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     timestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSSSSSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss','MM-dd-yyyy hh:mm:ss a','MM-dd-yyyy HH:mm:ss'],",
						"     manifestType: 'manifest',",
						"     mode: 'read') ~> GetEntity",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('vuzion_crm/'+ $pm_TableName)) ~> GetBronzeData",
						"DropCurrentWatermark derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"GetBronzeData aggregate(CurrentWatermark = max(toTimestamp(byName('modifiedon')))) ~> GetMaxWatermark",
						"AddCurrentWatermark filter(iif(isNull(CurrentWatermark),true(),toTimestamp(byName('modifiedon')) > CurrentWatermark)) ~> Increment",
						"GetEntity, GetMaxWatermark join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> AddCurrentWatermark",
						"Increment select(mapColumn(",
						"          each(match(name!='CurrentWatermark'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropCurrentWatermark",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('vuzion_crm/'+ $pm_TableName),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_VUZION_CRM_TO_BRONZE_FULLLOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VUZION"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_VUZION_CRM_DYNAMICS",
								"type": "DatasetReference"
							},
							"name": "GetEntity"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						},
						{
							"name": "ApplyParquetName"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "General",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_TableName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     dateFormats: ['dd/MM/yyyy'],",
						"     timestampFormats: ['dd/MM/yyyy h:mm a'],",
						"     manifestType: 'manifest',",
						"     mode: 'read') ~> GetEntity",
						"ApplyParquetName derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"GetEntity select(mapColumn(",
						"          each(match(true()),",
						"               applyParquetNaming($$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ApplyParquetName",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('vuzion_crm/'+ $pm_TableName),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_BRONZE_TO_SILVER_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_10_BRONZE_TO_SILVER_TRIGGER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_10_BRONZE_TO_SILVER_TRIGGER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "20 Silver"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}