{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ig-dev-westeurope"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLDB_NAV_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLDB_NAV_DYNAMIC",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_DatabaseName": {
							"value": "@dataset().pm_DatabaseName",
							"type": "Expression"
						},
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					},
					"pm_SchemaName": {
						"type": "string"
					},
					"pm_DatabaseName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/IGSQL03 [Navision]"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLDB_NUVIAS_FO_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLDB_NUVIAS_FO",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						},
						"pm_DatabaseType": {
							"value": "@dataset().pm_DatabaseType",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_DatabaseType": {
						"type": "string"
					},
					"pm_SchemaName": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/NUVIAS/FO"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLDB_NUVIAS_FO_DYNAMIC_SCRIPT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLDB_NUVIAS_FO",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						},
						"pm_DatabaseType": {
							"value": "@dataset().pm_DatabaseType",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_Environment": {
						"type": "string"
					},
					"pm_DatabaseType": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/NUVIAS/FO"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQLDB_TAGETIK_DYNAMIC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQLDB_TAGETIK",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_SchemaName": {
						"type": "string"
					},
					"pm_TableName": {
						"type": "string"
					},
					"pm_Environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/TAG02 [Tagetik]"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pm_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_VUZION_CRM_DYNAMICS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_VUZION_CRM_DYNAMICS",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Service_Uri": {
							"value": "@dataset().pm_Service_Uri",
							"type": "Expression"
						},
						"pm_Service_Principal_Id": {
							"value": "@dataset().pm_Service_Principal_Id",
							"type": "Expression"
						},
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_TableName": {
						"type": "string"
					},
					"pm_Service_Uri": {
						"type": "string"
					},
					"pm_Service_Principal_Id": {
						"type": "string"
					},
					"pm_Environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/VUZION [CRM]"
				},
				"annotations": [],
				"type": "DynamicsCrmEntity",
				"schema": [],
				"typeProperties": {
					"entityName": {
						"value": "@dataset().pm_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_VUZION_CRM_DYNAMICS_SCRIPT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_VUZION_CRM_DYNAMICS",
					"type": "LinkedServiceReference",
					"parameters": {
						"pm_Service_Uri": {
							"value": "@dataset().pm_Service_Uri",
							"type": "Expression"
						},
						"pm_Service_Principal_Id": {
							"value": "@dataset().pm_Service_Principal_Id",
							"type": "Expression"
						},
						"pm_Environment": {
							"value": "@dataset().pm_Environment",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"pm_TableName": {
						"type": "string"
					},
					"pm_Service_Uri": {
						"type": "string"
					},
					"pm_Service_Principal_Id": {
						"type": "string"
					},
					"pm_Environment": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources/VUZION [CRM]"
				},
				"annotations": [],
				"type": "DynamicsCrmEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "vz1_coreproducts"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_NUVIAS_FO_CDM_TO_BRONZE_DELTALOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NUVIAS/Dynamics"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_NUVIAS_DYNAMICS",
								"type": "LinkedServiceReference"
							},
							"name": "GetCDMEnity"
						},
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "GetBronzeData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						},
						{
							"name": "GetMaxWatermark"
						},
						{
							"name": "Increment"
						},
						{
							"name": "AddCurrentWatermark"
						},
						{
							"name": "DropCurrentWatermark"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_Entity as string,",
						"     pm_ManifestPath as string,",
						"     pm_ManifestFile as string,",
						"     pm_FullLoad as boolean (false())",
						"}",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     entity: ($pm_Entity),",
						"     format: 'cdm',",
						"     manifestType: 'manifest',",
						"     manifestName: ($pm_ManifestFile),",
						"     entityPath: ($pm_ManifestPath),",
						"     local: true,",
						"     folderPath: 'nuvias.operations.dynamics.com',",
						"     fileSystem: 'dynamics365-financeandoperations',",
						"     timestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSSSSSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss','MM-dd-yyyy hh:mm:ss a','MM-dd-yyyy HH:mm:ss'],",
						"     mode: 'read') ~> GetCDMEnity",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('nuvias.operations.dynamics.com/'+ $pm_Entity)) ~> GetBronzeData",
						"DropCurrentWatermark derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"GetBronzeData aggregate(CurrentWatermark = max(toTimestamp(byName('DataLakeModified_DateTime')))) ~> GetMaxWatermark",
						"AddCurrentWatermark filter(iif(isNull(CurrentWatermark),true(),toTimestamp(byName('DataLakeModified_DateTime')) > CurrentWatermark)) ~> Increment",
						"GetCDMEnity, GetMaxWatermark join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> AddCurrentWatermark",
						"Increment select(mapColumn(",
						"          each(match(name!='CurrentWatermark'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropCurrentWatermark",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('nuvias.operations.dynamics.com/'+ $pm_Entity),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_NUVIAS_FO_CDM_TO_BRONZE_FULLLOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NUVIAS/Dynamics"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_NUVIAS_DYNAMICS",
								"type": "LinkedServiceReference"
							},
							"name": "GetCDMEnity"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_Entity as string,",
						"     pm_ManifestPath as string,",
						"     pm_ManifestFile as string,",
						"     pm_FullLoad as boolean (false())",
						"}",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     entity: ($pm_Entity),",
						"     format: 'cdm',",
						"     manifestType: 'manifest',",
						"     manifestName: ($pm_ManifestFile),",
						"     entityPath: ($pm_ManifestPath),",
						"     local: true,",
						"     folderPath: 'nuvias.operations.dynamics.com',",
						"     fileSystem: 'dynamics365-financeandoperations',",
						"     timestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSSSSSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss','MM-dd-yyyy hh:mm:ss a','MM-dd-yyyy HH:mm:ss'],",
						"     mode: 'read') ~> GetCDMEnity",
						"GetCDMEnity derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('nuvias.operations.dynamics.com/'+ $pm_Entity),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_BRONZE_TO_SILVER_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_10_BRONZE_TO_SILVER_TRIGGER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_10_BRONZE_TO_SILVER_TRIGGER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "20 Silver"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-28T12:02:33Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_SILVER_TO_GOLD_OBT_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_10_SILVER_TO_GOLD_OBT_TRIGGER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_10_SILVER_TO_GOLD_OBT_TRIGGER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "30 Gold"
				},
				"annotations": [],
				"lastPublishTime": "2024-07-15T05:52:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_RESELLERGROUPS_Load_Sheet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Sheet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "Sys_Bronze_InsertDateTime_UTC",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "resellergroups",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "*.xlsx",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Infinigate Company",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "InfinigateCompany",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ResellerID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ResellerID",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ResellerName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ResellerName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ResellerGroupCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ResellerGroupCode",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ResellerGroupName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ResellerGroupName",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Entity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Entity",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"type": "String"
										},
										"sink": {
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_DV_RESELLERGROUPS_EXCEL",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_PARQUET_STATIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_FileSystem": {
										"value": "bronze",
										"type": "Expression"
									},
									"pm_Directory": {
										"value": "masterdata/resellergroups",
										"type": "Expression"
									},
									"pm_FileName": {
										"value": "bronze-resellergroups-@{utcNow()}",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "10 Bronze/RESELLERGROUPS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T09:38:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_CLOUDBLUE_OSS_Copy_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfFullLoad",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.pm_full_load",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Full Load Cloudblue PBA_Delta_Load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											]
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 1000000,
												"fileNamePrefix": {
													"value": "bronze-cloudblue-@{pipeline().parameters.pm_TableName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_PSSQL_CLOUDBLUE_OSS_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_TableName",
													"type": "Expression"
												},
												"pm_TableSchema": "public"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "cloudblue/oss/@{pipeline().parameters.pm_TableName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Full Load Cloudblue PBA",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											]
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 1000000,
												"fileNamePrefix": {
													"value": "bronze-cloudblue-@{pipeline().parameters.pm_TableName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_PSSQL_CLOUDBLUE_OSS_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_TableName",
													"type": "Expression"
												},
												"pm_TableSchema": "public"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "cloudblue/oss/@{pipeline().parameters.pm_TableName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_full_load": {
						"type": "bool",
						"defaultValue": false
					},
					"pm_TableName": {
						"type": "string"
					}
				},
				"variables": {
					"v_watermark_update_meta_source": {
						"type": "Integer"
					},
					"v_Column_Name_update_meta_source": {
						"type": "String"
					},
					"v_Table_Name_update_meta_source": {
						"type": "String"
					},
					"Watermark_int": {
						"type": "Integer"
					},
					"Watermark_int_delta": {
						"type": "String"
					}
				},
				"folder": {
					"name": "10 Bronze/CLOUDBLUE/OSS"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-03T08:42:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_CLOUDBLUE_PBA_Copy_Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfFullLoad",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.pm_full_load",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Delta Load Cloudblue PBA",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Watermark_delta",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Watermark_delta_source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"query": {
												"value": "SELECT * FROM public.\"@{pipeline().parameters.pm_TableName}\" WHERE \"@{pipeline().parameters.pm_ColumnName}\"<= @{variables('Watermark_int_delta')} and \"@{pipeline().parameters.pm_ColumnName}\" > @{variables('Watermark_int')}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 500000,
												"fileNamePrefix": {
													"value": "bronze-cloudblue-@{pipeline().parameters.pm_TableName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_PSSQL_CLOUDBLUE_PBA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_TableName",
													"type": "Expression"
												},
												"pm_TableSchema": {
													"value": "'public'",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "cloudblue/pba/@{pipeline().parameters.pm_TableName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get Watermark data for Delta",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n      [TABLE_NAME]\n      ,[COLUMN_NAME]\n \n      ,[WATERMARK] as WATERMARK_current\n  FROM [adf].[CT_CLOUDBLUE_PBA_TABLES]\n  where [TABLE_NAME] = '@{pipeline().parameters.pm_TableName}'\n  and COLUMN_NAME = '@{pipeline().parameters.pm_ColumnName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "adf",
												"pm_TableName": "CT_CLOUDBLUE_PBA_TABLES",
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Watermark_delta",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Watermark data for Delta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Watermark_int",
										"value": {
											"value": "@activity('Get Watermark data for Delta').output.value[0].WATERMARK_current",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateWatermark_DeltaLoad",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delta Load Cloudblue PBA",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_cloudblue_pba_tables_watermark_upsert]",
										"storedProcedureParameters": {
											"table_name": {
												"value": {
													"value": "@{pipeline().parameters.pm_TableName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"watermark": {
												"value": {
													"value": "@variables('Watermark_int_delta')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Get Watermark data source",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource",
											"query": {
												"value": "SELECT MAX(\"@{pipeline().parameters.pm_ColumnName}\") AS WATERMARK_NEW FROM \"@{pipeline().parameters.pm_TableName}\"",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_PSSQL_CLOUDBLUE_PBA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_TableName",
													"type": "Expression"
												},
												"pm_TableSchema": {
													"value": "'public'",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Watermark_delta_source",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Watermark data source",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Watermark_int_delta",
										"value": {
											"value": "@activity('Get Watermark data source').output.value[0].WATERMARK_NEW",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Full Load Cloudblue PBA",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:30:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"query": {
												"value": "SELECT * FROM public.\"@{pipeline().parameters.pm_TableName}\" WHERE \"@{pipeline().parameters.pm_ColumnName}\"<= @{variables('Watermark_int')}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 500000,
												"fileNamePrefix": {
													"value": "bronze-cloudblue-@{pipeline().parameters.pm_TableName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_PSSQL_CLOUDBLUE_PBA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_TableName",
													"type": "Expression"
												},
												"pm_TableSchema": {
													"value": "'public'",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "cloudblue/pba/@{pipeline().parameters.pm_TableName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Get Watermark data",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource",
											"query": {
												"value": "SELECT MAX(\"@{pipeline().parameters.pm_ColumnName}\") AS WATERMARK_NEW FROM \"@{pipeline().parameters.pm_TableName}\"",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "DS_PSSQL_CLOUDBLUE_PBA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_TableName",
													"type": "Expression"
												},
												"pm_TableSchema": {
													"value": "'public'",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Watermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Watermark data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Watermark_int",
										"value": {
											"value": "@activity('Get Watermark data').output.value[0].WATERMARK_NEW",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateWatermark_FullLoad",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Full Load Cloudblue PBA",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_cloudblue_pba_tables_watermark_upsert]",
										"storedProcedureParameters": {
											"table_name": {
												"value": {
													"value": "@{pipeline().parameters.pm_TableName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"watermark": {
												"value": {
													"value": "@variables('Watermark_int')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_full_load": {
						"type": "bool",
						"defaultValue": false
					},
					"pm_TableName": {
						"type": "string"
					},
					"pm_WaterMark": {
						"type": "int"
					},
					"pm_ColumnName": {
						"type": "string"
					}
				},
				"variables": {
					"v_Column_Name_update_meta_source": {
						"type": "String"
					},
					"v_Table_Name_update_meta_source": {
						"type": "String"
					},
					"Watermark_int": {
						"type": "Integer"
					},
					"Watermark_int_delta": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "10 Bronze/CLOUDBLUE/PBA"
				},
				"annotations": [],
				"lastPublishTime": "2024-01-03T08:42:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_DATANOW_ARR_LATEST_Load_Sheet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Sheet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "Sys_Bronze_InsertDateTime_UTC",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "datanow/arr/latest",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "*.xlsx",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Vendor name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Vendor_Name",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "SKU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SKU",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Commitment Duration (in months)",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Commitment_Duration_in_months",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Commitment Duration2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Commitment_Duration2",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Billing frequency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Billing_Frequency",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Billing Frequency2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Billing_Frequency2",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Consumption Model",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Consumption_Model",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Product type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Type",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Somme de Sales (EUR) LTM",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Somme_de_Sales_EUR_LTM",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Mapping type Duration",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Mapping_Type_Duration",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Mapping type Billing",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Mapping_Type_Billing",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "MRR ratio",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MRR_Ratio",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Commitment duration value",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Commitment_Duration_Value",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Billing frequency value2",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Billing_Frequency_Value2",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "MRR",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MRR",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"type": "String"
										},
										"sink": {
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_DV_DATANOW_ARR_LATEST_EXCEL",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_PARQUET_STATIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_FileSystem": {
										"value": "bronze",
										"type": "Expression"
									},
									"pm_Directory": {
										"value": "masterdata/datanow/latest/sku",
										"type": "Expression"
									},
									"pm_FileName": {
										"value": "bronze-datanow-latest-arr-@{utcNow()}",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "10 Bronze/DATANOW/LATEST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:59:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_DATANOW_ARR_Load_Sheet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Sheet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "Sys_Bronze_InsertDateTime_UTC",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									},
									{
										"name": "Sys_SheetName",
										"value": {
											"value": "@pipeline().parameters.pm_SheetName",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": {
										"value": "datanow/arr",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "*.xlsx",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SKU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SKU",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Commitment Duration",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Commitment_Duration",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Billing Frequency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Billing_Frequency",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Consumption Model",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Consumption_Model",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Product type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Product_Type",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Vendor",
											"type": "String"
										},
										"sink": {
											"name": "Vendor"
										}
									},
									{
										"source": {
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"type": "String"
										},
										"sink": {
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Sys_SheetName",
											"type": "String"
										},
										"sink": {
											"name": "Sys_SheetName",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_DV_DATANOW_ARR_EXCEL",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_SheetName": {
										"value": "@pipeline().parameters.pm_SheetName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_PARQUET_STATIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_FileSystem": {
										"value": "bronze",
										"type": "Expression"
									},
									"pm_Directory": {
										"value": "masterdata/datanow/sku",
										"type": "Expression"
									},
									"pm_FileName": {
										"value": "bronze-datanow-arr-@{pipeline().parameters.pm_SheetName}-@{utcNow()}",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_SheetName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "10 Bronze/DATANOW"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T07:01:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_NUVIAS_OPERATIONS_LOAD_ENTITY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfFullLoad",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.pm_FullLoad",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Load CDM Entity to Bronze Delta",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF_NUVIAS_FO_CDM_TO_BRONZE_DELTALOAD",
											"type": "DataFlowReference",
											"parameters": {
												"pm_Entity": {
													"value": "'@{pipeline().parameters.pm_Entity}'",
													"type": "Expression"
												},
												"pm_ManifestPath": {
													"value": "'@{pipeline().parameters.pm_ManifestPath}'",
													"type": "Expression"
												},
												"pm_ManifestFile": {
													"value": "'@{pipeline().parameters.pm_ManifestFile}'",
													"type": "Expression"
												},
												"pm_FullLoad": {
													"value": "@pipeline().parameters.pm_FullLoad",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"GetCDMEnity": {},
												"GetBronzeData": {},
												"WriteDeltaTable": {}
											},
											"linkedServiceParameters": {
												"GetCDMEnity": {
													"linkedService": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"GetBronzeData": {
													"linkedService": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"WriteDeltaTable": {
													"linkedService": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "ir-ig-managed-dev-westeurope",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine",
										"continuationSettings": {
											"customizedCheckpointKey": "9a19c2d3-7dbd-478f-b20d-20b33fa02f01"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Load CDM Entity to Bronze Full",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF_NUVIAS_FO_CDM_TO_BRONZE_FULLLOAD",
											"type": "DataFlowReference",
											"parameters": {
												"pm_Entity": {
													"value": "'@{pipeline().parameters.pm_Entity}'",
													"type": "Expression"
												},
												"pm_ManifestPath": {
													"value": "'@{pipeline().parameters.pm_ManifestPath}'",
													"type": "Expression"
												},
												"pm_ManifestFile": {
													"value": "'@{pipeline().parameters.pm_ManifestFile}'",
													"type": "Expression"
												},
												"pm_FullLoad": "false()"
											},
											"datasetParameters": {
												"GetCDMEnity": {},
												"WriteDeltaTable": {}
											},
											"linkedServiceParameters": {
												"GetCDMEnity": {
													"linkedService": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"WriteDeltaTable": {
													"linkedService": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "ir-ig-managed-dev-westeurope",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine",
										"continuationSettings": {
											"customizedCheckpointKey": "4e72946d-00da-4e11-955c-06d57b8fe563"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_Entity": {
						"type": "string"
					},
					"pm_ManifestPath": {
						"type": "string"
					},
					"pm_ManifestFile": {
						"type": "string"
					},
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "10 Bronze/NUVIAS/OPERATIONS"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-25T15:09:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_NUVIAS_FO_CDM_TO_BRONZE_DELTALOAD')]",
				"[concat(variables('factoryId'), '/dataflows/DF_NUVIAS_FO_CDM_TO_BRONZE_FULLLOAD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_SILVER_TO_GOLD_TAG02_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_30_SILVER_TO_GOLD_TAG02_TRIGGER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_30_SILVER_TO_GOLD_TAG02_TRIGGER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "30 Gold"
				},
				"annotations": [],
				"lastPublishTime": "2024-07-15T05:52:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_TAG02_Load_View')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfFullLoad",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.pm_FullLoad",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Delta Load Tagetik View",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SetNewWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select * FROM  [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\nwhere [DATEUPD] > '@{variables('v_WatermarkDelta')}'\nand [DATEUPD] <= '@{variables('v_WatermarkDeltaUpdate')}'\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 1000000,
												"fileNamePrefix": {
													"value": "bronze-tag02-@{pipeline().parameters.pm_ViewName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "edw",
												"pm_TableName": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												},
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "tag02/@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetWatermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT [WATERMARK]\n  FROM [adf].[CT_TAG02_TABLES]\n  where TABLE_NAME = '@{pipeline().parameters.pm_ViewName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "adf",
												"pm_TableName": {
													"value": "CT_TAG02_TABLES",
													"type": "Expression"
												},
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_WatermarkDelta",
										"value": {
											"value": "@if(empty(activity('GetWatermark').output.value),'1900-01-01',activity('GetWatermark').output.value[0].WATERMARK)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetNewWatermark_Delta",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select max([DATEUPD]) as WATERMARK ,'@{pipeline().parameters.pm_ViewName}' as TABLE_NAME\nFROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "INFORMATION_SCHEMA",
												"pm_TableName": "TABLES",
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetNewWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNewWatermark_Delta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_WatermarkDeltaUpdate",
										"value": {
											"value": "@activity('GetNewWatermark_Delta').output.value[0].WATERMARK",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delta Load Tagetik View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_tag02_tables_watermark_upsert]",
										"storedProcedureParameters": {
											"table_name": {
												"value": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"watermark": {
												"value": {
													"value": "@variables('v_WatermarkDeltaUpdate')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Full Load Tagetik View",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetWatermark_FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select * FROM  [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\nwhere [DATEUPD] <= '@{variables('v_WatermarkDeltaUpdate')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 1000000,
												"fileNamePrefix": {
													"value": "bronze-tag02-@{pipeline().parameters.pm_ViewName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "edw",
												"pm_TableName": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												},
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "tag02/@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetNewWatermark_FullLoad",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select max([DATEUPD]) as WATERMARK ,'@{pipeline().parameters.pm_ViewName}' as TABLE_NAME\nFROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "INFORMATION_SCHEMA",
												"pm_TableName": "TABLES",
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetWatermark_FullLoad",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNewWatermark_FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_WatermarkDeltaUpdate",
										"value": {
											"value": "@activity('GetNewWatermark_FullLoad').output.value[0].WATERMARK",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateWatermark_FullLoad",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Full Load Tagetik View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_tag02_tables_watermark_upsert]",
										"storedProcedureParameters": {
											"table_name": {
												"value": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"watermark": {
												"value": {
													"value": "@variables('v_WatermarkDeltaUpdate')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_ViewName": {
						"type": "string"
					},
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"v_WatermarkDelta": {
						"type": "String"
					},
					"v_WatermarkDeltaUpdate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "10 Bronze/TAG02 [TAGETIK]"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-27T07:55:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQLDB_TAGETIK_DYNAMIC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_TAG02_Sync_Keys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBusinessKeys",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select * from [adf].[CT_TAG02_KEYS]\nwhere TABLE_NAME = '@{pipeline().parameters.pm_ViewName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_TAG02_KEYS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "BusinessKeysExists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetBusinessKeys",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('GetBusinessKeys').output.firstRow.Business_Keys,null)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Extract all current Keys",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_DataFactory_LoadDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select DISTINCT @{activity('GetBusinessKeys').output.firstRow.Business_Keys} FROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": {
													"value": "edw_@{pipeline().globalParameters.gpm_Environment}",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET_STATIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@{pipeline().globalParameters.gpm_Environment}",
													"type": "Expression"
												},
												"pm_FileSystem": "keys",
												"pm_Directory": {
													"value": "tag02/@{toLower(replace(pipeline().parameters.pm_ViewName,' ','_'))}",
													"type": "Expression"
												},
												"pm_FileName": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_ViewName": {
						"type": "string"
					}
				},
				"variables": {
					"v_Watermark": {
						"type": "String"
					},
					"v_NewWatermark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "10 Bronze/TAG02 [TAGETIK]"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-14T13:20:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQLDB_TAGETIK_DYNAMIC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_VUZION_ARR_Load_Sheet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load Sheet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"additionalColumns": [
									{
										"name": "Sys_Bronze_InsertDateTime_UTC",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFolderPath": {
										"value": "vuzion/arr",
										"type": "Expression"
									},
									"wildcardFileName": {
										"value": "*.xlsx",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "vendor_name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vendor_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "sku",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "sku",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "commitment_duration",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "commitment_duration",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "billing_frequency",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "billing_frequency",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "consumption_model",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "consumption_model",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "product_type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "product_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"type": "String"
										},
										"sink": {
											"name": "Sys_Bronze_InsertDateTime_UTC",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ADLS_DV_VUZION_ARR_EXCEL",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_SheetIndex": {
										"value": "@pipeline().parameters.pm_SheetIndex",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_PARQUET_STATIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_FileSystem": {
										"value": "bronze",
										"type": "Expression"
									},
									"pm_Directory": {
										"value": "masterdata/vuzion/vuzionarr",
										"type": "Expression"
									},
									"pm_FileName": {
										"value": "bronze-vuzion-arr-@{pipeline().parameters.pm_SheetIndex}-@{utcNow()}",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_SheetIndex": {
						"type": "int"
					}
				},
				"folder": {
					"name": "10 Bronze/VUZION"
				},
				"annotations": [],
				"lastPublishTime": "2023-11-01T13:55:23Z"
			},
			"dependsOn": []
		}
	]
}