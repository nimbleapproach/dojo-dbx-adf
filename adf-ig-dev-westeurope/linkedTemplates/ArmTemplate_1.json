{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ig-dev-westeurope"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_IGSQL03_Curate_Parquet_Files_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Bronze Table Names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_IGSQL03_KEYS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Bronze Table Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Bronze Table Names').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 2,
							"activities": [
								{
									"name": "PL_20_IGSQL03_Curate_Parquet_Files",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_IGSQL03_Curate_Parquet_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_FullLoad": {
												"value": "@pipeline().parameters.pm_FullLoad",
												"type": "Expression"
											},
											"pm_TableName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											},
											"pm_BusinessKeys": {
												"value": "@item().BUSINESS_KEYS",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"v_BusinessKeys": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "20 Curation/IGSQL03 [Navision]"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_TAG02_Curate_Parquet_Files_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Bronze Table Names",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_TAG02_KEYS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Bronze Table Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Bronze Table Names').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 2,
							"activities": [
								{
									"name": "PL_20_IGSQL03_Curate_Parquet_Files",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_TAG02_Curate_Parquet_Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_FullLoad": {
												"value": "@pipeline().parameters.pm_FullLoad",
												"type": "Expression"
											},
											"pm_TableName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											},
											"pm_BusinessKeys": {
												"value": "@item().BUSINESS_KEYS",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"v_BusinessKeys": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "20 Curation/TAG02 [Tagetik]"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_TAG02_Load_View')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfFullLoad",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.pm_FullLoad",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Delta Load Tagetik View",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "SetNewWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select * FROM  [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\nwhere [DATEUPD] > '@{variables('v_WatermarkDelta')}'\nand [DATEUPD] <= '@{variables('v_WatermarkDeltaUpdate')}'\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 1000000,
												"fileNamePrefix": {
													"value": "bronze-tag02-@{pipeline().parameters.pm_ViewName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "edw",
												"pm_TableName": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												},
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "tag02/@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetWatermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT [WATERMARK]\n  FROM [adf].[CT_TAG02_TABLES]\n  where TABLE_NAME = '@{pipeline().parameters.pm_ViewName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "adf",
												"pm_TableName": {
													"value": "CT_TAG02_TABLES",
													"type": "Expression"
												},
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_WatermarkDelta",
										"value": {
											"value": "@if(empty(activity('GetWatermark').output.value),'1900-01-01',activity('GetWatermark').output.value[0].WATERMARK)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "GetNewWatermark_Delta",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select max([DATEUPD]) as WATERMARK ,'@{pipeline().parameters.pm_ViewName}' as TABLE_NAME\nFROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "INFORMATION_SCHEMA",
												"pm_TableName": "TABLES",
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetNewWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNewWatermark_Delta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_WatermarkDeltaUpdate",
										"value": {
											"value": "@activity('GetNewWatermark_Delta').output.value[0].WATERMARK",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delta Load Tagetik View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_tag02_tables_watermark_upsert]",
										"storedProcedureParameters": {
											"table_name": {
												"value": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"watermark": {
												"value": {
													"value": "@variables('v_WatermarkDeltaUpdate')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Full Load Tagetik View",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetWatermark_FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select * FROM  [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\nwhere [DATEUPD] <= '@{variables('v_WatermarkDeltaUpdate')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 1000000,
												"fileNamePrefix": {
													"value": "bronze-igsql03-@{pipeline().parameters.pm_ViewName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "edw",
												"pm_TableName": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												},
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "tag02/@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetNewWatermark_FullLoad",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select max([DATEUPD]) as WATERMARK ,'@{pipeline().parameters.pm_ViewName}' as TABLE_NAME\nFROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "INFORMATION_SCHEMA",
												"pm_TableName": "TABLES",
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetWatermark_FullLoad",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNewWatermark_FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_WatermarkDeltaUpdate",
										"value": {
											"value": "@activity('GetNewWatermark_FullLoad').output.value[0].WATERMARK",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateWatermark_FullLoad",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Full Load Tagetik View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_tag02_tables_watermark_upsert]",
										"storedProcedureParameters": {
											"table_name": {
												"value": {
													"value": "@{pipeline().parameters.pm_ViewName}",
													"type": "Expression"
												},
												"type": "String"
											},
											"watermark": {
												"value": {
													"value": "@variables('v_WatermarkDeltaUpdate')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_ViewName": {
						"type": "string"
					},
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"v_WatermarkDelta": {
						"type": "String"
					},
					"v_WatermarkDeltaUpdate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "10 Ingestion/TAG02 [TAGETIK]"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_30_IGSQL03_Load_View')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If FullLoad",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@pipeline().parameters.pm_FullLoad",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Delta Load Navision View",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetNewWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												},
												{
													"name": "Sys_DatabaseName",
													"value": {
														"value": "@pipeline().parameters.pm_DatabaseName",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select * FROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\nwhere [Sys_RowNumber] > @{variables('v_Watermark')}\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 1000000,
												"fileNamePrefix": {
													"value": "bronze-igsql03-@{pipeline().parameters.pm_ViewName}-@{pipeline().parameters.pm_DatabaseName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQLDB_NAV_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"pm_SchemaName": "edw",
												"pm_DatabaseName": {
													"value": "@pipeline().parameters.pm_DatabaseName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "igsql03/@{pipeline().parameters.pm_ViewName}/DatabaseName=@{pipeline().parameters.pm_DatabaseName}/@{formatDateTime(utcNow(),'yyyy')}/@{formatDateTime(utcNow(),'MM')}/@{formatDateTime(utcNow(),'dd')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetWatermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT [WATERMARK]\n  FROM [adf].[CT_IGSQL03_TABLES]\n  where TABLE_NAME = '@{pipeline().parameters.pm_ViewName}'\n  and DATABASE_NAME = '@{pipeline().parameters.pm_DatabaseName}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": "adf",
												"pm_TableName": "CT_IGSQL03_TABLES",
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_Watermark",
										"value": {
											"value": "@if(empty(activity('GetWatermark').output.value),'0',activity('GetWatermark').output.value[0].WATERMARK)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delta Load Navision View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_igsql03_tables_watermark_upsert]",
										"storedProcedureParameters": {
											"database_name": {
												"value": {
													"value": "@pipeline().parameters.pm_DatabaseName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"type": "String"
											},
											"watermark": {
												"value": {
													"value": "@variables('v_NewWatermark')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetNewWatermark",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "Select max([Sys_RowNumber]) as NewWatermark FROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\nwhere Sys_RowNumber > @{variables('v_Watermark')} \n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_NAV_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"pm_SchemaName": {
													"value": "edw",
													"type": "Expression"
												},
												"pm_DatabaseName": {
													"value": "@pipeline().parameters.pm_DatabaseName",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetNewWatermark",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNewWatermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_NewWatermark",
										"value": {
											"value": "@string(\n    coalesce(\n        activity('GetNewWatermark').output.value[0].NewWatermark,\n        variables('v_Watermark')\n        )\n    )",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AddLoggingEntryDelta",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delta Load Navision View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_igsql03_logging]",
										"storedProcedureParameters": {
											"database_name": {
												"value": {
													"value": "@pipeline().parameters.pm_DatabaseName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"type": "String"
											},
											"dataread": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.dataRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"datawritten": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.datawritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"fileswritten": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.fileswritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"sourcepeakconnections": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.sourcepeakconnections",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"sinkpeakconnections": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.sinkpeakconnections",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"rowsread": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.rowsread",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"rowscopied": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.rowscopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"copyduration": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.copyduration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"throughput": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"usedparallelcopies": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.usedparallelcopies",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"queuingduration": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.executiondetails[0].detaileddurations.queuingduration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"timetofirstbyte": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.executiondetails[0].detaileddurations.timetofirstbyte",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"transferduration": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.executiondetails[0].detaileddurations.transferduration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start": {
												"value": {
													"value": "@activity('Delta Load Navision View').output.executiondetails[0].start",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"full_load": {
												"value": {
													"value": "@pipeline().parameters.pm_FullLoad",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Full Load Navision View",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetNewWatermark_FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "Sys_Bronze_InsertDateTime_UTC",
													"value": {
														"value": "@utcNow()",
														"type": "Expression"
													}
												},
												{
													"name": "Sys_DatabaseName",
													"value": {
														"value": "@pipeline().parameters.pm_DatabaseName",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "Select * FROM  [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\nwhere [Sys_RowNumber] <= '@{variables('v_NewWatermark')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings",
												"maxRowsPerFile": 1000000,
												"fileNamePrefix": {
													"value": "bronze-igsql03-@{pipeline().parameters.pm_ViewName}-@{pipeline().parameters.pm_DatabaseName}-@{utcNow()}",
													"type": "Expression"
												}
											}
										},
										"enableStaging": false,
										"validateDataConsistency": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": true
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ADLS",
													"type": "LinkedServiceReference",
													"parameters": {
														"pm_Environment": {
															"value": "@pipeline().globalParameters.gpm_Environment",
															"type": "Expression"
														}
													}
												},
												"path": "logging/adf"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SQLDB_NAV_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"pm_SchemaName": "edw",
												"pm_DatabaseName": {
													"value": "@pipeline().parameters.pm_DatabaseName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_PARQUET",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_FileSystem": "bronze",
												"pm_Directory": {
													"value": "igsql03/@{pipeline().parameters.pm_ViewName}/DatabaseName=@{pipeline().parameters.pm_DatabaseName}/@{formatDateTime(utcNow(),'yyyy')}/@{formatDateTime(utcNow(),'MM')}/@{formatDateTime(utcNow(),'dd')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "UpdateWatermark_FullLoad",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Full Load Navision View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_igsql03_tables_watermark_upsert]",
										"storedProcedureParameters": {
											"database_name": {
												"value": {
													"value": "@pipeline().parameters.pm_DatabaseName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"type": "String"
											},
											"watermark": {
												"value": {
													"value": "@variables('v_NewWatermark')",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetNewWatermark_FullLoad",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "Select max([Sys_RowNumber]) as NewWatermark FROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_NAV_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"pm_SchemaName": {
													"value": "edw",
													"type": "Expression"
												},
												"pm_DatabaseName": {
													"value": "@pipeline().parameters.pm_DatabaseName",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetNewWatermark_FullLoad",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetNewWatermark_FullLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "v_NewWatermark",
										"value": {
											"value": "@string(\n    coalesce(\n        activity('GetNewWatermark_FullLoad').output.value[0].NewWatermark,\n        0\n        )\n    )",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AddLoggingEntryFull",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Full Load Navision View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[adf].[sp_igsql03_logging]",
										"storedProcedureParameters": {
											"database_name": {
												"value": {
													"value": "@pipeline().parameters.pm_DatabaseName",
													"type": "Expression"
												},
												"type": "String"
											},
											"table_name": {
												"value": {
													"value": "@pipeline().parameters.pm_ViewName",
													"type": "Expression"
												},
												"type": "String"
											},
											"dataread": {
												"value": {
													"value": "@activity('Full Load Navision View').output.dataRead",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"datawritten": {
												"value": {
													"value": "@activity('Full Load Navision View').output.datawritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"fileswritten": {
												"value": {
													"value": "@activity('Full Load Navision View').output.fileswritten",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"sourcepeakconnections": {
												"value": {
													"value": "@activity('Full Load Navision View').output.sourcepeakconnections",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"sinkpeakconnections": {
												"value": {
													"value": "@activity('Full Load Navision View').output.sinkpeakconnections",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"rowsread": {
												"value": {
													"value": "@activity('Full Load Navision View').output.rowsread",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"rowscopied": {
												"value": {
													"value": "@activity('Full Load Navision View').output.rowscopied",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"copyduration": {
												"value": {
													"value": "@activity('Full Load Navision View').output.copyduration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"throughput": {
												"value": {
													"value": "@activity('Full Load Navision View').output.throughput",
													"type": "Expression"
												},
												"type": "Decimal"
											},
											"usedparallelcopies": {
												"value": {
													"value": "@activity('Full Load Navision View').output.usedparallelcopies",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"queuingduration": {
												"value": {
													"value": "@activity('Full Load Navision View').output.executiondetails[0].detaileddurations.queuingduration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"timetofirstbyte": {
												"value": {
													"value": "@activity('Full Load Navision View').output.executiondetails[0].detaileddurations.timetofirstbyte",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"transferduration": {
												"value": {
													"value": "@activity('Full Load Navision View').output.executiondetails[0].detaileddurations.transferduration",
													"type": "Expression"
												},
												"type": "Int64"
											},
											"start": {
												"value": {
													"value": "@activity('Full Load Navision View').output.executiondetails[0].start",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"full_load": {
												"value": {
													"value": "@pipeline().parameters.pm_FullLoad",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_METADATA",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_DatabaseName": {
						"type": "string"
					},
					"pm_ViewName": {
						"type": "string"
					},
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"v_Watermark": {
						"type": "String"
					},
					"v_NewWatermark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "10 Ingestion/IGSQL03 [Navision]"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_30_IGSQL03_Recreate_View')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Recreate View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Drop View If Exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQLDB_NAV_DYNAMIC",
							"type": "LinkedServiceReference",
							"parameters": {
								"pm_DatabaseName": {
									"value": "@pipeline().parameters.pm_DatabaseName",
									"type": "Expression"
								},
								"pm_Environment": {
									"value": "@pipeline().globalParameters.gpm_Environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "\ncreate view [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_TableName}]\nas\n\nSELECT \ncast([timestamp] as bigint)as [Sys_RowNumber],\n@{concat(join(variables('ColumnString'),',' ) )} FROM dbo.[@{pipeline().parameters.pm_TableName}]\n\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get Columns Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [adf].[CT_IGSQL03_COLUMNS]\nWHERE [TABLE_NAME] = '@{pipeline().parameters.pm_TableName}'\nAND [ACTIVE] =1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_IGSQL03_COLUMNS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Column",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Columns Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Columns Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append Variable",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ColumnString",
										"value": {
											"value": "[[@{item().COLUMN_NAME}] as [@{replace(replace(replace(replace(replace(replace(replace(item().COLUMN_NAME,' ',''),'(',''),')',''),',',''),';',''),'{',''),'}','')}]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Drop View If Exist",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "For Each Column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQLDB_NAV_DYNAMIC",
							"type": "LinkedServiceReference",
							"parameters": {
								"pm_DatabaseName": {
									"value": "@pipeline().parameters.pm_DatabaseName",
									"type": "Expression"
								},
								"pm_Environment": {
									"value": "@pipeline().globalParameters.gpm_Environment",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "if object_id('[edw_@{pipeline().globalParameters.gpm_Environment}].@{pipeline().parameters.pm_TableName}', 'V') \nis not null drop view [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_TableName}]\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_TableName": {
						"type": "string"
					},
					"pm_DatabaseName": {
						"type": "string"
					}
				},
				"variables": {
					"ColumnString": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "00 Technical/IGSQL03 [Navision]/Recreate View"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_30_IGSQL03_Sync_Keys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Extract all current Keys",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"additionalColumns": [
									{
										"name": "Sys_DataFactory_LoadDateTime_UTC",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									},
									{
										"name": "Sys_DataFactory_DatabaseName",
										"value": {
											"value": "@pipeline().parameters.pm_DatabaseName",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": {
									"value": "Select DISTINCT @{join(pipeline().parameters.pm_BuinessKeys,',')} FROM [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_ViewName}]\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQLDB_NAV_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_TableName": {
										"value": "@pipeline().parameters.pm_ViewName",
										"type": "Expression"
									},
									"pm_SchemaName": "edw",
									"pm_DatabaseName": {
										"value": "@pipeline().parameters.pm_DatabaseName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_PARQUET_STATIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_FileSystem": "keys",
									"pm_Directory": {
										"value": "igsql03/@{pipeline().parameters.pm_ViewName}",
										"type": "Expression"
									},
									"pm_FileName": {
										"value": "@{pipeline().parameters.pm_ViewName}-@{pipeline().parameters.pm_DatabaseName}",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_DatabaseName": {
						"type": "string"
					},
					"pm_ViewName": {
						"type": "string"
					},
					"pm_BuinessKeys": {
						"type": "array"
					}
				},
				"variables": {
					"v_Watermark": {
						"type": "String"
					},
					"v_NewWatermark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "10 Ingestion/IGSQL03 [Navision]"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_30_TAG02_Recreate_View')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Recreate View",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Drop View If Exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQLDB_TAGETIK",
							"type": "LinkedServiceReference",
							"parameters": {
								"pm_Environment": "@pipeline().globalParameters.gpm_Environment"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "create view [edw_@{pipeline().globalParameters.gpm_Environment}].[@{pipeline().parameters.pm_TableName}]\nas\n\nSELECT \n@{concat(join(variables('ColumnString'),',' ) )} \nFROM dbo.[@{pipeline().parameters.pm_TableName}]",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get Columns Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [adf].[CT_TAG02_COLUMNS]\nWHERE [TABLE_NAME] = '@{pipeline().parameters.pm_TableName}'\nAND [ACTIVE] =1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_TAG02_COLUMNS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Column",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Columns Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Columns Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append Variable",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ColumnString",
										"value": {
											"value": "[[@{item().COLUMN_NAME}] as [@{replace(replace(replace(replace(replace(replace(replace(item().COLUMN_NAME,' ',''),'(',''),')',''),',',''),';',''),'{',''),'}','')}]",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Drop View If Exist",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "For Each Column",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "LS_SQLDB_TAGETIK",
							"type": "LinkedServiceReference",
							"parameters": {
								"pm_Environment": "@pipeline().globalParameters.gpm_Environment"
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "if object_id('[edw_@{pipeline().globalParameters.gpm_Environment}].@{replace(replace(replace(replace(join(split(pipeline().parameters.pm_TableName,' '),''),'_',''),'-',''),'(',''),')','')}', 'V') \nis not null drop view [edw_@{pipeline().globalParameters.gpm_Environment}].[@{replace(replace(replace(replace(join(split(pipeline().parameters.pm_TableName,' '),''),'_',''),'-',''),'(',''),')','')}]\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_TableName": {
						"type": "string"
					}
				},
				"variables": {
					"ColumnString": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "00 Technical/TAG02 [TAGETIK]/Recreate View"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_99_IGSQL03_CREATE_EDW_LAYER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get DatabasesControl Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT *\n  FROM [adf].[CT_IGSQL03_DATABASES]\n  where Active = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_IGSQL03_DATABASES",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Database",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get DatabasesControl Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get DatabasesControl Table').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create EDW Schema",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "LS_SQLDB_NAV_DYNAMIC",
										"type": "LinkedServiceReference",
										"parameters": {
											"pm_DatabaseName": {
												"value": "@item().DATABASE_NAME",
												"type": "Expression"
											},
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "CREATE SCHEMA [edw_@{pipeline().globalParameters.gpm_Environment}]",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00 Technical/IGSQL03 [Navision]"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Startlink_Connection_Test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Netsuite Data from DV to Bronze",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.pm_directory",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSV_NETSUITE_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_directory": {
										"value": "@pipeline().parameters.pm_directory",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_PARQUET",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_FileSystem": "bronze",
									"pm_Directory": {
										"value": "starlink/@{pipeline().parameters.pm_directory}",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "10 Ingestion/NETSUITE"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_IGSQL03_Curate_Parquet_Files_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_10_IGSQL03_Curate_Parquet_Files_ITERATOR",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_10_IGSQL03_Curate_Parquet_Files_ITERATOR",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pm_FullLoad": {
									"value": "@pipeline().parameters.pm_FullLoad",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "20 Curation/IGSQL03 [Navision]"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_10_IGSQL03_Curate_Parquet_Files_ITERATOR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_TAG02_Curate_Parquet_Files_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_10_TAG02_Curate_Parquet_Files_ITERATOR",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_10_TAG02_Curate_Parquet_Files_ITERATOR",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pm_FullLoad": {
									"value": "@pipeline().parameters.pm_FullLoad",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "20 Curation/TAG02 [Tagetik]"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_10_TAG02_Curate_Parquet_Files_ITERATOR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_TAG02_Load_View_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get EDW Views",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  * FROM INFORMATION_SCHEMA.views\nwhere table_SCHEMA='edw_@{pipeline().globalParameters.gpm_Environment}' \n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": {
										"value": "INFORMATION_SCHEMA",
										"type": "Expression"
									},
									"pm_TableName": {
										"value": "VIEWS",
										"type": "Expression"
									},
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachView",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get EDW Views",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get EDW Views').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_20_TAG02_Load_View",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_TAG02_Load_View",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_ViewName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											},
											"pm_FullLoad": {
												"value": "@pipeline().parameters.pm_FullLoad",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "10 Ingestion/TAG02 [TAGETIK]"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_20_TAG02_Load_View')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_TAG02_Recreate_View_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Database",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Columns Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Columns Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_30_TAG02_Recreate_View",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_30_TAG02_Recreate_View",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_TableName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Columns Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT TABLE_NAME FROM [adf].[CT_TAG02_COLUMNS]\nWHERE  [ACTIVE] =1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_TAG02_COLUMNS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00 Technical/TAG02 [TAGETIK]/Recreate View"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_30_TAG02_Recreate_View')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_IGSQL03_Load_View_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get EDW Views",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get EDW Views').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_30_IGSQL03_Load_View",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "GetBusinessKeys",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_30_IGSQL03_Load_View",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_DatabaseName": {
												"value": "@pipeline().parameters.pm_DatabaseName",
												"type": "Expression"
											},
											"pm_ViewName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											},
											"pm_FullLoad": {
												"value": "@pipeline().parameters.pm_FullLoad",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "GetBusinessKeys",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select [TABLE_NAME],[BUSINESS_KEYS] from [adf].[CT_IGSQL03_KEYS]\nwhere [TABLE_NAME] = '@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
											"type": "DatasetReference",
											"parameters": {
												"pm_SchemaName": {
													"value": "adf",
													"type": "Expression"
												},
												"pm_TableName": {
													"value": "CT_IGSQL03_KEYS",
													"type": "Expression"
												},
												"pm_Environment": {
													"value": "@pipeline().globalParameters.gpm_Environment",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "IfBusinessKeysExists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "PL_30_IGSQL03_Load_View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(activity('GetBusinessKeys').output.firstRow.BUSINESS_KEYS)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "PL_30_IGSQL03_Sync_Keys",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "PL_30_IGSQL03_Sync_Keys",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"pm_DatabaseName": {
															"value": "@pipeline().parameters.pm_DatabaseName",
															"type": "Expression"
														},
														"pm_ViewName": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														},
														"pm_BuinessKeys": {
															"value": "@split(activity('GetBusinessKeys').output.firstRow.BUSINESS_KEYS,',')",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get EDW Views",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "Select [TABLE_NAME] FROM INFORMATION_SCHEMA.TABLES\nwhere [TABLE_SCHEMA] = 'edw_@{pipeline().globalParameters.gpm_Environment}'\nand [TABLE_CATALOG] = '@{pipeline().parameters.pm_DatabaseName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_NAV_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_TableName": {
										"value": "TABLES",
										"type": "Expression"
									},
									"pm_SchemaName": "INFORMATION_SCHEMA",
									"pm_DatabaseName": {
										"value": "@pipeline().parameters.pm_DatabaseName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_DatabaseName": {
						"type": "string"
					},
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "10 Ingestion/IGSQL03 [Navision]"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_30_IGSQL03_Load_View')]",
				"[concat(variables('factoryId'), '/pipelines/PL_30_IGSQL03_Sync_Keys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_IGSQL03_Recreate_View_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get DatabasesControl Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get DatabasesControl Table').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "PL_30_IGSQL03_Recreate_View",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_30_IGSQL03_Recreate_View",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_TableName": {
												"value": "@pipeline().parameters.pm_TableName",
												"type": "Expression"
											},
											"pm_DatabaseName": {
												"value": "@item().DATABASE_NAME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get DatabasesControl Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT *\n  FROM [adf].[CT_IGSQL03_DATABASES]\n  where Active = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_IGSQL03_DATABASES",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00 Technical/IGSQL03 [Navision]/Recreate View"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_30_IGSQL03_Recreate_View')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_TAG02_Load_View_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_10_TAG02_Load_View_ITERATOR",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_10_TAG02_Load_View_ITERATOR",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pm_FullLoad": {
									"value": "@pipeline().parameters.pm_full_load",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_full_load": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "10 Ingestion/TAG02 [TAGETIK]"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_10_TAG02_Load_View_ITERATOR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_IGSQL03_Load_View_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Database",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get DatabasesControl Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get DatabasesControl Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_20_IGSQL03_Load_View",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_IGSQL03_Load_View_ITERATOR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_DatabaseName": {
												"value": "@item().DATABASE_NAME",
												"type": "Expression"
											},
											"pm_FullLoad": {
												"value": "@pipeline().parameters.pm_FullLoad",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get DatabasesControl Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT *\n  FROM [adf].[CT_IGSQL03_DATABASES]\n  where Active = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_IGSQL03_DATABASES",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "10 Ingestion/IGSQL03 [Navision]"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_20_IGSQL03_Load_View_ITERATOR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_IGSQL03_Recreate_View_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Database",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Columns Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Columns Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_20_IGSQL03_Recreate_View",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_IGSQL03_Recreate_View_ITERATOR",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_TableName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Columns Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT TABLE_NAME FROM [adf].[CT_IGSQL03_COLUMNS]\nWHERE  [ACTIVE] =1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_IGSQL03_COLUMNS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "00 Technical/IGSQL03 [Navision]/Recreate View"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_20_IGSQL03_Recreate_View_ITERATOR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_IGSQL03_Load_View_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_10_IGSQL03_Load_View_ITERATOR",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_10_IGSQL03_Load_View_ITERATOR",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pm_FullLoad": {
									"value": "@pipeline().parameters.pm_FullLoad",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "10 Ingestion/IGSQL03 [Navision]"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_10_IGSQL03_Load_View_ITERATOR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_00_TAG02_Load_View_MASTER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_00_TAG02_Load_View_MASTER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pm_full_load": {
									"value": "@pipeline().parameters.pm_FullLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_00_IGSQL03_Load_View_MASTER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_00_IGSQL03_Load_View_MASTER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pm_FullLoad": {
									"value": "@pipeline().parameters.pm_FullLoad",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PL_00_TAG02_Curate_Parquet_Files_MASTER",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Skipped",
						"dependsOn": [
							{
								"activity": "PL_00_TAG02_Load_View_MASTER",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "PL_00_IGSQL03_Load_View_MASTER",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_00_TAG02_Curate_Parquet_Files_MASTER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_00_IGSQL03_Curate_Parquet_Files_MASTER",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Skipped",
						"dependsOn": [
							{
								"activity": "PL_00_TAG02_Curate_Parquet_Files_MASTER",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_00_IGSQL03_Curate_Parquet_Files_MASTER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "00 Technical"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_00_TAG02_Load_View_MASTER')]",
				"[concat(variables('factoryId'), '/pipelines/PL_00_IGSQL03_Load_View_MASTER')]",
				"[concat(variables('factoryId'), '/pipelines/PL_00_TAG02_Curate_Parquet_Files_MASTER')]",
				"[concat(variables('factoryId'), '/pipelines/PL_00_IGSQL03_Curate_Parquet_Files_MASTER')]"
			]
		}
	]
}