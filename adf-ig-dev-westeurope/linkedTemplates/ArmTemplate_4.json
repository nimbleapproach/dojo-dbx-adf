{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ig-dev-westeurope"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_DCB_EXCEL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DCB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_DV_DCB_EXCEL",
								"type": "DatasetReference"
							},
							"name": "GetExcelFile"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaFiles"
						}
					],
					"transformations": [
						{
							"name": "Partition"
						},
						{
							"name": "AddSystemColumns",
							"description": "Creating/updating the columns 'Sys_Bronze_InsertDateTime_UTC'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Invoice as string,",
						"          {Vlgnr.} as string,",
						"          {Invoice date} as string,",
						"          {Invoice month} as string,",
						"          {Invoice year} as string,",
						"          SO as string,",
						"          {SO date} as string,",
						"          {Reseller ID} as string,",
						"          {Reseller name} as string,",
						"          {VAT number} as string,",
						"          SKU as string,",
						"          Description as string,",
						"          Remark as string,",
						"          Qty as string,",
						"          {Price/unit} as string,",
						"          {% line discount} as string,",
						"          {Amount line discount} as string,",
						"          {Net price} as string,",
						"          {Total invoice} as string,",
						"          Entity as string,",
						"          {Article group} as string,",
						"          {Product Type} as string,",
						"          {Vendor number} as string,",
						"          {Vendor ID} as string,",
						"          Vendor as string,",
						"          {Cred.order} as string,",
						"          Margin as string,",
						"          {margin in %} as string,",
						"          Invoice_linenumber as string,",
						"          line_verkoopfactuurregels as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['dcb/pending','dcb/archived'],",
						"     rowUrlColumn: 'Sys_FileName') ~> GetExcelFile",
						"GetExcelFile window(over(Invoice),",
						"     asc(SKU, true),",
						"     LineNo = rowNumber()) ~> Partition",
						"Partition derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddSystemColumns",
						"AddSystemColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'bronze',",
						"     folderPath: 'dcb/invoicedata',",
						"     compressionCodec: 'snappy',",
						"     partitionFileNames:[(concat('bronze-dcb-',toString(currentUTC()),'.snappy.parquet')\r",
						")],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Invoice,",
						"          Vlgnr = {Vlgnr.},",
						"          Invoice_Date = {Invoice date},",
						"          Invoice_Month = {Invoice month},",
						"          Invoice_Year = {Invoice year},",
						"          SO,",
						"          SO_Date = {SO date},",
						"          Reseller_ID = {Reseller ID},",
						"          Reseller_Name = {Reseller name},",
						"          VAT_Number = {VAT number},",
						"          SKU,",
						"          Description,",
						"          Remark,",
						"          Qty,",
						"          Unit_Price = {Price/unit},",
						"          Line_Discount_Percentage = {% line discount},",
						"          Line_Discount_Amount = {Amount line discount},",
						"          Net_Price = {Net price},",
						"          Total_Invoice = {Total invoice},",
						"          Entity,",
						"          Article_Group = {Article group},",
						"          Product_Type = {Product Type},",
						"          Vendor_Number = {Vendor number},",
						"          Vendor_ID = {Vendor ID},",
						"          Vendor,",
						"          Cred_Order = {Cred.order},",
						"          Margin,",
						"          Margin_Percentage = {margin in %},",
						"          Invoice_linenumber,",
						"          line_verkoopfactuurregels,",
						"          Sys_FileName,",
						"          LineNo,",
						"          Sys_Bronze_InsertDateTime_UTC",
						"     ),",
						"     partitionBy('hash', 1)) ~> WriteDeltaFiles"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DELTALINK_EXCEL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DELTALINK"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_DV_DELTALINK_EXCEL",
								"type": "DatasetReference"
							},
							"name": "GetExcelFile"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaFiles"
						}
					],
					"transformations": [
						{
							"name": "Partition"
						},
						{
							"name": "AddSystemColumns",
							"description": "Creating/updating the columns 'Sys_Bronze_InsertDateTime_UTC'"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_FileName as string",
						"}",
						"source(output(",
						"          {Invoice Date} as string,",
						"          {Order Type} as string,",
						"          {Order Number} as integer,",
						"          {Invoice Number} as integer,",
						"          {Client Number} as integer,",
						"          Company as string,",
						"          Artcode as string,",
						"          Supplier_ID as string,",
						"          Supplier as string,",
						"          {Art Sup Code} as string,",
						"          Description as string,",
						"          Quantity as short,",
						"          {Article Product Type} as string,",
						"          Currency as string,",
						"          {Revenue Transaction} as double,",
						"          {Cost Transaction} as double,",
						"          {Margin Transaction} as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['deltalink/pending','deltalink/archived'],",
						"     rowUrlColumn: 'Sys_FileName') ~> GetExcelFile",
						"GetExcelFile window(over({Invoice Number}),",
						"     asc(Artcode, true),",
						"     LineNo = rowNumber()) ~> Partition",
						"Partition derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddSystemColumns",
						"AddSystemColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'bronze',",
						"     folderPath: 'deltalink/invoicedata',",
						"     compressionCodec: 'snappy',",
						"     partitionFileNames:[(concat('bronze-deltalink-',toString($pm_FileName),'-',toString(currentUTC()),'.snappy.parquet'))],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          InvoiceDate = {Invoice Date},",
						"          OrderType = {Order Type},",
						"          OrderNumber = {Order Number},",
						"          InvoiceNumber = {Invoice Number},",
						"          ClientNumber = {Client Number},",
						"          Company,",
						"          Artcode,",
						"          SupplierID = Supplier_ID,",
						"          Supplier,",
						"          ArtSupCode = {Art Sup Code},",
						"          Description,",
						"          Quantity,",
						"          ArticleProductType = {Article Product Type},",
						"          Currency,",
						"          RevenueTransaction = {Revenue Transaction},",
						"          CostTransaction = {Cost Transaction},",
						"          MarginTransaction = {Margin Transaction},",
						"          Sys_FileName,",
						"          LineNo,",
						"          Sys_Bronze_InsertDateTime_UTC",
						"     ),",
						"     partitionBy('hash', 1)) ~> WriteDeltaFiles"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_NETSAFE_EXCEL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NETSAFE"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_DV_NETSAFE_EXCEL",
								"type": "DatasetReference"
							},
							"name": "GetExcelFile"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaFiles"
						}
					],
					"transformations": [
						{
							"name": "AddSystemColumns",
							"description": "Creating/updating the columns 'Sys_Bronze_InsertDateTime_UTC'"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Invoice Date} as string,",
						"          {Sales Order Number} as string,",
						"          {Invoice Number} as string,",
						"          {Item ID} as string,",
						"          SKU as string,",
						"          {Item Type} as string,",
						"          {Customer Name} as string,",
						"          Qty as float,",
						"          {Transaction Currency} as string,",
						"          {Revenue Transaction Currency} as double,",
						"          {Cost Transaction Currency} as double,",
						"          {Margin Transaction Currency} as double,",
						"          {Exchange Rate} as string,",
						"          {Revenue GBP} as string,",
						"          {Cost GBP} as string,",
						"          {Margin GBP} as string,",
						"          {Vendor ID} as string,",
						"          {Vendor Name} as string,",
						"          {Account Manager} as string,",
						"          {Order Type} as string,",
						"          {Quote ID} as string,",
						"          {Customer Account} as string,",
						"          {SKU Description} as string,",
						"          Country as string,",
						"          {Invoice Line Nb} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: [('netsafe/pending/'),('netsafe/archived/')],",
						"     rowUrlColumn: 'Sys_FileName') ~> GetExcelFile",
						"GetExcelFile derive(Sys_Bronze_InsertDateTime_UTC = currentUTC(),",
						"          Sys_Country = regexExtract(Sys_FileName,'(Romania|Croatia|Slovenia|Bulgaria)')) ~> AddSystemColumns",
						"AddSystemColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     fileSystem: 'bronze',",
						"     folderPath: 'netsafe/invoicedata',",
						"     compressionCodec: 'snappy',",
						"     partitionFileNames:[(concat('bronze-netsafe-',toString(currentUTC()),'.snappy.parquet')\r",
						")],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Invoice_Date = {Invoice Date},",
						"          Sales_Order_Number = {Sales Order Number},",
						"          Invoice_Number = {Invoice Number},",
						"          Item_ID = {Item ID},",
						"          SKU,",
						"          Item_Type = {Item Type},",
						"          Customer_Name = {Customer Name},",
						"          Qty,",
						"          Transaction_Currency = {Transaction Currency},",
						"          Revenue_Transaction_Currency = {Revenue Transaction Currency},",
						"          Cost_Transaction_Currency = {Cost Transaction Currency},",
						"          Margin_Transaction_Currency = {Margin Transaction Currency},",
						"          Exchange_Rate = {Exchange Rate},",
						"          Revenue_GBP = {Revenue GBP},",
						"          Cost_GBP = {Cost GBP},",
						"          Margin_GBP = {Margin GBP},",
						"          Vendor_ID = {Vendor ID},",
						"          Vendor_Name = {Vendor Name},",
						"          Account_Manager = {Account Manager},",
						"          Order_Type = {Order Type},",
						"          Quote_ID = {Quote ID},",
						"          Customer_Account = {Customer Account},",
						"          SKU_Description = {SKU Description},",
						"          Country,",
						"          Invoice_Line_Nb = {Invoice Line Nb},",
						"          Sys_Country,",
						"          Sys_FileName,",
						"          Sys_Bronze_InsertDateTime_UTC",
						"     ),",
						"     partitionBy('hash', 1)) ~> WriteDeltaFiles"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_NETSUITE_CDM_TO_BRONZE_DELTALOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Starlink/NETSUITE"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_CSV_NETSUITE_DYNAMIC",
								"type": "DatasetReference"
							},
							"name": "GetFile"
						},
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "GetBronzeData"
						},
						{
							"linkedService": {
								"referenceName": "LS_SQLDB_METADATA",
								"type": "LinkedServiceReference"
							},
							"name": "GetKeysControlTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						},
						{
							"name": "Cache"
						},
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteKeys"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						},
						{
							"name": "GetMaxWatermark"
						},
						{
							"name": "Increment"
						},
						{
							"name": "AddCurrentWatermark"
						},
						{
							"name": "DropCurrentWatermark"
						},
						{
							"name": "CastTimestamps"
						},
						{
							"name": "SelectKeys"
						},
						{
							"name": "Deduplicate"
						},
						{
							"name": "AddHashKey"
						},
						{
							"name": "DropSysHashKey"
						},
						{
							"name": "AddLoadTime"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_FileName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     multiLineRow: true,",
						"     dateFormats: ['dd/MM/yyyy'],",
						"     timestampFormats: ['dd/MM/yyyy h:mm a'],",
						"     manifestType: 'manifest',",
						"     mode: 'read') ~> GetFile",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('netsuite/'+ $pm_FileName)) ~> GetBronzeData",
						"source(output(",
						"          Business_Keys as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: (\"Select Business_Keys from [adf].[CT_NETSUITE_KEYS] where TABLE_NAME = '\" +$pm_FileName + \"'\"),",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> GetKeysControlTable",
						"DropCurrentWatermark derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"GetBronzeData aggregate(CurrentWatermark = max(toTimestamp(byName('Last_Modified')))) ~> GetMaxWatermark",
						"AddCurrentWatermark filter(iif(isNull(CurrentWatermark),true(),toTimestamp(byName('Last_Modified')) > CurrentWatermark)) ~> Increment",
						"CastTimestamps, GetMaxWatermark join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> AddCurrentWatermark",
						"Increment select(mapColumn(",
						"          each(match(name!='CurrentWatermark'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropCurrentWatermark",
						"GetFile derive(Last_Modified = toTimestamp(byName('Last_Modified'),'dd/MM/yyyy h:mm a'),",
						"          Date_Created = toTimestamp(byName('Date_Created'),'dd/MM/yyyy h:mm a')) ~> CastTimestamps",
						"GetFile select(mapColumn(",
						"          each(match(contains(split(Cache#output().Business_Keys,','),#item==name)))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectKeys",
						"AddHashKey aggregate(groupBy(Sys_HashKey),",
						"     each(match(name!='Sys_HashKey'), $$ = first($$))) ~> Deduplicate",
						"SelectKeys derive(Sys_HashKey = sha2(256, concatWS('~',toString(columns())))) ~> AddHashKey",
						"Deduplicate select(mapColumn(",
						"          each(match(name!='Sys_HashKey'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropSysHashKey",
						"DropSysHashKey derive(Sys_DataFactory_LoadDateTime_UTC = currentUTC()) ~> AddLoadTime",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('netsuite/'+ $pm_FileName),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable",
						"GetKeysControlTable sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> Cache",
						"AddLoadTime sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'keys',",
						"     folderPath: ('netsuite/'+ $pm_FileName),",
						"     overwrite: true,",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteKeys"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_NETSUITE_CDM_TO_BRONZE_FULLLOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Starlink/NETSUITE"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_CSV_NETSUITE_DYNAMIC",
								"type": "DatasetReference"
							},
							"name": "GetFile"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						},
						{
							"name": "CastTimestamps"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_FileName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     multiLineRow: true,",
						"     dateFormats: ['dd/MM/yyyy'],",
						"     timestampFormats: ['dd/MM/yyyy h:mm a'],",
						"     manifestType: 'manifest',",
						"     mode: 'read') ~> GetFile",
						"CastTimestamps derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"GetFile derive(Last_Modified = toTimestamp(byName('Last_Modified'),'dd/MM/yyyy h:mm a'),",
						"          Date_Created = toTimestamp(byName('Date_Created'),'dd/MM/yyyy h:mm a')) ~> CastTimestamps",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('netsuite/'+ $pm_FileName),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_NUAZ_SQLSERVER_01_TO_ADLS_BRONZE')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "NUVIAS/NUAZ_SQLSERVER-01 [FO]"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQLDB_NUVIAS_FO_DYNAMIC",
								"type": "DatasetReference"
							},
							"name": "GetSQLTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteToBronzeADLS"
						}
					],
					"transformations": [
						{
							"name": "ApplyParquetName"
						},
						{
							"name": "AddCurrentUTC"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "General",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_TableSchema as string,",
						"     pm_TableName as string,",
						"     pm_DatabaseName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> GetSQLTable",
						"GetSQLTable select(mapColumn(",
						"          each(match(true()),",
						"               applyParquetNaming($$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ApplyParquetName",
						"ApplyParquetName derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddCurrentUTC",
						"AddCurrentUTC sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: ('bronze'),",
						"     folderPath: ('nuaz-sqlserver-01/'+$pm_DatabaseName+'/'+$pm_TableSchema+'/'+$pm_TableName),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteToBronzeADLS"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_VUZION_CRM_TO_BRONZE_DELTALOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VUZION"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_VUZION_CRM_DYNAMICS",
								"type": "DatasetReference"
							},
							"name": "GetEntity"
						},
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "GetBronzeData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						},
						{
							"name": "GetMaxWatermark"
						},
						{
							"name": "Increment"
						},
						{
							"name": "AddCurrentWatermark"
						},
						{
							"name": "DropCurrentWatermark"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_TableName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     timestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSSSSSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss','MM-dd-yyyy hh:mm:ss a','MM-dd-yyyy HH:mm:ss'],",
						"     manifestType: 'manifest',",
						"     mode: 'read') ~> GetEntity",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('vuzion_crm/'+ $pm_TableName)) ~> GetBronzeData",
						"DropCurrentWatermark derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"GetBronzeData aggregate(CurrentWatermark = max(toTimestamp(byName('modifiedon')))) ~> GetMaxWatermark",
						"AddCurrentWatermark filter(iif(isNull(CurrentWatermark),true(),toTimestamp(byName('modifiedon')) > CurrentWatermark)) ~> Increment",
						"GetEntity, GetMaxWatermark join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> AddCurrentWatermark",
						"Increment select(mapColumn(",
						"          each(match(name!='CurrentWatermark'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropCurrentWatermark",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('vuzion_crm/'+ $pm_TableName),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_VUZION_CRM_TO_BRONZE_FULLLOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "VUZION"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_VUZION_CRM_DYNAMICS",
								"type": "DatasetReference"
							},
							"name": "GetEntity"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS",
								"type": "LinkedServiceReference"
							},
							"name": "WriteDeltaTable"
						}
					],
					"transformations": [
						{
							"name": "AddBronzeLoadDate"
						},
						{
							"name": "ApplyParquetName"
						}
					],
					"udfLibraries": [
						{
							"referenceName": "General",
							"type": "DataFlowReference"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pm_TableName as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     dateFormats: ['dd/MM/yyyy'],",
						"     timestampFormats: ['dd/MM/yyyy h:mm a'],",
						"     manifestType: 'manifest',",
						"     mode: 'read') ~> GetEntity",
						"ApplyParquetName derive(Sys_Bronze_InsertDateTime_UTC = currentUTC()) ~> AddBronzeLoadDate",
						"GetEntity select(mapColumn(",
						"          each(match(true()),",
						"               applyParquetNaming($$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ApplyParquetName",
						"AddBronzeLoadDate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     compressionType: 'snappy',",
						"     compressionLevel: 'Fastest',",
						"     fileSystem: 'bronze',",
						"     folderPath: ('vuzion_crm/'+ $pm_TableName),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WriteDeltaTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_DATANOW_ARR_LATEST_Load_Sheet_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_20_DATANOW_ARR_LATEST_Load_Sheet",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_20_DATANOW_ARR_LATEST_Load_Sheet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "10 Bronze/DATANOW/LATEST"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_00_RESELLERGROUPS_Load_Sheet_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PL_10_RESELLERGROUPS_Load_Sheet",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_10_RESELLERGROUPS_Load_Sheet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "10 Bronze/RESELLERGROUPS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_CLOUDBLUE_OSS_Load_Table_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get EDW Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT [TABLE_NAME]\nFROM [adf].[CT_CLOUDBLUE_OSS_TABLES]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_CLOUDBLUE_OSS_TABLES",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachView",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get EDW Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get EDW Tables').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "PL_20_CLOUDBLUE_Copy_Data",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_CLOUDBLUE_OSS_Copy_Data",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_full_load": {
												"value": "@pipeline().parameters.pm_full_load",
												"type": "Expression"
											},
											"pm_TableName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_full_load": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"v_tabelnames": {
						"type": "String"
					},
					"Watermark_int_delta": {
						"type": "String"
					}
				},
				"folder": {
					"name": "10 Bronze/CLOUDBLUE/OSS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_CLOUDBLUE_PBA_Load_Table_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get EDW Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT [TABLE_NAME] ,[COLUMN_NAME] , [WATERMARK] \n  FROM [adf].[CT_CLOUDBLUE_PBA_TABLES]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_CLOUDBLUE_PBA_TABLES",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachView",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get EDW Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get EDW Tables').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "PL_20_CLOUDBLUE_Copy_Data",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_CLOUDBLUE_PBA_Copy_Data",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_full_load": {
												"value": "@pipeline().parameters.pm_full_load",
												"type": "Expression"
											},
											"pm_TableName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											},
											"pm_WaterMark": {
												"value": "@item().WATERMARK",
												"type": "Expression"
											},
											"pm_ColumnName": {
												"value": "@item().COLUMN_NAME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_full_load": {
						"type": "string",
						"defaultValue": "false"
					}
				},
				"variables": {
					"v_tabelnames": {
						"type": "String"
					},
					"Watermark_int_delta": {
						"type": "String"
					}
				},
				"folder": {
					"name": "10 Bronze/CLOUDBLUE/PBA"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_DATANOW_ARR_Load_Sheet_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSheetNames",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "\nSELECT [SheetName]\n  FROM [adf].[CT_DATANOW_ARR_SHEETS]\n  where ShouldBeLoaded = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_DATANOW_ARR_SHEETS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSheet",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSheetNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSheetNames').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_20_DATANOW_ARR_Load_Sheet",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_DATANOW_ARR_Load_Sheet",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_SheetName": {
												"value": "@item().SheetName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "10 Bronze/DATANOW"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_TAG02_Load_View_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get EDW Views",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  * FROM INFORMATION_SCHEMA.views\nwhere table_SCHEMA='edw_@{pipeline().globalParameters.gpm_Environment}' \n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_TAGETIK_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": {
										"value": "INFORMATION_SCHEMA",
										"type": "Expression"
									},
									"pm_TableName": {
										"value": "VIEWS",
										"type": "Expression"
									},
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachView",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get EDW Views",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get EDW Views').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_20_TAG02_Load_View",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_TAG02_Load_View",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_ViewName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											},
											"pm_FullLoad": {
												"value": "@pipeline().parameters.pm_FullLoad",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "PL_20_TAG02_Sync_Keys",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "PL_20_TAG02_Load_View",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_TAG02_Sync_Keys",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_ViewName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "10 Bronze/TAG02 [TAGETIK]"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_TAG02_Recreate_View_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Database",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Columns Control Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Columns Control Table').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_30_TAG02_Recreate_View",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_30_TAG02_Recreate_View",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_TableName": {
												"value": "@item().TABLE_NAME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Get Columns Control Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT TABLE_NAME FROM [adf].[CT_TAG02_COLUMNS]\nWHERE  [ACTIVE] =1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_TAG02_COLUMNS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00 Setup/TAG02 [TAGETIK]/Recreate View"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_VUZION_ARR_Load_Sheet_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachSheet",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@createArray(0,1)",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_20_VUZION_ARR_Load_Sheet",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_VUZION_ARR_Load_Sheet",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_SheetIndex": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "10 Bronze/VUZION"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_10_VUZION_BUDGET_Load_Sheet_ITERATOR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetSheetNames",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT [SheetName]\n  FROM [adf].[CT_VUZION_BUDGET_SHEETS]\n  where ShouldBeLoaded = 1",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDB_METADATA_DYNAMIC",
								"type": "DatasetReference",
								"parameters": {
									"pm_SchemaName": "adf",
									"pm_TableName": "CT_VUZION_BUDGET_SHEETS",
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSheet",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetSheetNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetSheetNames').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "PL_20_VUZION_BUDGET_Load_Sheet",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_VUZION_BUDGET_Load_Sheet",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_SheetName": {
												"value": "@item().SheetName",
												"type": "Expression"
											},
											"pm_FileName": {
												"value": "@pipeline().parameters.pm_FileName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "10 Bronze/VUZION/BUDGET"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_15_NUVIAS_OPERATIONS_ITERATOR__7')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetManifest",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_ADLS_JSON_NUVIAS_FO_MANIFEST",
								"type": "DatasetReference",
								"parameters": {
									"pm_Environment": {
										"value": "@pipeline().globalParameters.gpm_Environment",
										"type": "Expression"
									},
									"pm_ManifestPath": {
										"value": "@pipeline().parameters.pm_ManifestPath",
										"type": "Expression"
									},
									"pm_ManifestName": {
										"value": "@pipeline().parameters.pm_ManifestFile",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "ForEachSubmanifest",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetManifest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@if(contains(activity('GetManifest').output.firstRow,'subManifests'),activity('GetManifest').output.firstRow.subManifests,skip(array(''),1))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "FoundOneMoreDepth",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Found more depths then 7.",
										"errorCode": "400"
									}
								}
							]
						}
					},
					{
						"name": "ForEachEntities",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetManifest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@if(contains(activity('GetManifest').output.firstRow,'entities'),activity('GetManifest').output.firstRow.entities,skip(array(''),1))",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "PL_20_NUVIAS_OPERATIONS_LOAD_ENTITY",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_20_NUVIAS_OPERATIONS_LOAD_ENTITY",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"pm_Entity": {
												"value": "@item().entityName",
												"type": "Expression"
											},
											"pm_ManifestPath": {
												"value": "@pipeline().parameters.pm_ManifestPath",
												"type": "Expression"
											},
											"pm_ManifestFile": {
												"value": "@pipeline().parameters.pm_ManifestFile",
												"type": "Expression"
											},
											"pm_FullLoad": {
												"value": "@pipeline().parameters.pm_FullLoad",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pm_FullLoad": {
						"type": "bool",
						"defaultValue": false
					},
					"pm_ManifestPath": {
						"type": "string"
					},
					"pm_ManifestFile": {
						"type": "string"
					}
				},
				"folder": {
					"name": "10 Bronze/NUVIAS/OPERATIONS"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_CLOUD_DISTRIBUTION_Load_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_CLOUD_DISTRIBUTION_EXEL_LOAD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CLOUD_DISTRIBUTION_EXEL_LOAD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GetExcelFile": {
										"pm_Environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										}
									},
									"WriteDeltaFiles": {}
								},
								"linkedServiceParameters": {
									"WriteDeltaFiles": {
										"linkedService": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ir-ig-managed-dev-westeurope",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "10 Bronze/CLOUD_DISTRIBUTION"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_20_D2B_Load_sheet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_D2B_EXEL_LOAD_CUSTOMER",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_D2B_EXEL_LOAD_CUSTOMER",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GetExcelFile": {
										"pm_environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										}
									},
									"WriteDeltaFiles": {}
								},
								"linkedServiceParameters": {
									"WriteDeltaFiles": {
										"linkedService": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ir-ig-managed-dev-westeurope",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_D2B_EXEL_LOAD_SALES",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DF_D2B_EXEL_LOAD_CUSTOMER",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_D2B_EXEL_LOAD_SALES",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"GetExcelFile": {
										"pm_environment": {
											"value": "@pipeline().globalParameters.gpm_Environment",
											"type": "Expression"
										}
									},
									"WriteDeltaFiles": {}
								},
								"linkedServiceParameters": {
									"WriteDeltaFiles": {
										"linkedService": {
											"pm_Environment": {
												"value": "@pipeline().globalParameters.gpm_Environment",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "ir-ig-managed-dev-westeurope",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "10 Bronze/D2B"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}